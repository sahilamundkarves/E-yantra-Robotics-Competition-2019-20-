
testS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800200  00001e3c  00001ed0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080020e  0080020e  00001ede  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ede  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001b0  00000000  00000000  00001f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002f32  00000000  00000000  000020be  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003a0  00000000  00000000  00004ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000019f1  00000000  00000000  00005390  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003fc  00000000  00000000  00006d84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000498  00000000  00000000  00007180  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001ab7  00000000  00000000  00007618  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003b0  00000000  00000000  000090cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b2 c0       	rjmp	.+356    	; 0x166 <__ctors_end>
       2:	00 00       	nop
       4:	d0 c0       	rjmp	.+416    	; 0x1a6 <__bad_interrupt>
       6:	00 00       	nop
       8:	ce c0       	rjmp	.+412    	; 0x1a6 <__bad_interrupt>
       a:	00 00       	nop
       c:	cc c0       	rjmp	.+408    	; 0x1a6 <__bad_interrupt>
       e:	00 00       	nop
      10:	ca c0       	rjmp	.+404    	; 0x1a6 <__bad_interrupt>
      12:	00 00       	nop
      14:	c8 c0       	rjmp	.+400    	; 0x1a6 <__bad_interrupt>
      16:	00 00       	nop
      18:	c6 c0       	rjmp	.+396    	; 0x1a6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c4 c0       	rjmp	.+392    	; 0x1a6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c2 c0       	rjmp	.+388    	; 0x1a6 <__bad_interrupt>
      22:	00 00       	nop
      24:	c0 c0       	rjmp	.+384    	; 0x1a6 <__bad_interrupt>
      26:	00 00       	nop
      28:	be c0       	rjmp	.+380    	; 0x1a6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	bc c0       	rjmp	.+376    	; 0x1a6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ba c0       	rjmp	.+372    	; 0x1a6 <__bad_interrupt>
      32:	00 00       	nop
      34:	b8 c0       	rjmp	.+368    	; 0x1a6 <__bad_interrupt>
      36:	00 00       	nop
      38:	b6 c0       	rjmp	.+364    	; 0x1a6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b4 c0       	rjmp	.+360    	; 0x1a6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b2 c0       	rjmp	.+356    	; 0x1a6 <__bad_interrupt>
      42:	00 00       	nop
      44:	b0 c0       	rjmp	.+352    	; 0x1a6 <__bad_interrupt>
      46:	00 00       	nop
      48:	ae c0       	rjmp	.+348    	; 0x1a6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ac c0       	rjmp	.+344    	; 0x1a6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	aa c0       	rjmp	.+340    	; 0x1a6 <__bad_interrupt>
      52:	00 00       	nop
      54:	a8 c0       	rjmp	.+336    	; 0x1a6 <__bad_interrupt>
      56:	00 00       	nop
      58:	a6 c0       	rjmp	.+332    	; 0x1a6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a4 c0       	rjmp	.+328    	; 0x1a6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a2 c0       	rjmp	.+324    	; 0x1a6 <__bad_interrupt>
      62:	00 00       	nop
      64:	a0 c0       	rjmp	.+320    	; 0x1a6 <__bad_interrupt>
      66:	00 00       	nop
      68:	9e c0       	rjmp	.+316    	; 0x1a6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9c c0       	rjmp	.+312    	; 0x1a6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	9a c0       	rjmp	.+308    	; 0x1a6 <__bad_interrupt>
      72:	00 00       	nop
      74:	98 c0       	rjmp	.+304    	; 0x1a6 <__bad_interrupt>
      76:	00 00       	nop
      78:	96 c0       	rjmp	.+300    	; 0x1a6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	94 c0       	rjmp	.+296    	; 0x1a6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	92 c0       	rjmp	.+292    	; 0x1a6 <__bad_interrupt>
      82:	00 00       	nop
      84:	90 c0       	rjmp	.+288    	; 0x1a6 <__bad_interrupt>
      86:	00 00       	nop
      88:	8e c0       	rjmp	.+284    	; 0x1a6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8c c0       	rjmp	.+280    	; 0x1a6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	8a c0       	rjmp	.+276    	; 0x1a6 <__bad_interrupt>
      92:	00 00       	nop
      94:	88 c0       	rjmp	.+272    	; 0x1a6 <__bad_interrupt>
      96:	00 00       	nop
      98:	86 c0       	rjmp	.+268    	; 0x1a6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	84 c0       	rjmp	.+264    	; 0x1a6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	82 c0       	rjmp	.+260    	; 0x1a6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	80 c0       	rjmp	.+256    	; 0x1a6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7e c0       	rjmp	.+252    	; 0x1a6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	7c c0       	rjmp	.+248    	; 0x1a6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	7a c0       	rjmp	.+244    	; 0x1a6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	78 c0       	rjmp	.+240    	; 0x1a6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	76 c0       	rjmp	.+236    	; 0x1a6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	74 c0       	rjmp	.+232    	; 0x1a6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	72 c0       	rjmp	.+228    	; 0x1a6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	70 c0       	rjmp	.+224    	; 0x1a6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	6e c0       	rjmp	.+220    	; 0x1a6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	6c c0       	rjmp	.+216    	; 0x1a6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	6a c0       	rjmp	.+212    	; 0x1a6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	68 c0       	rjmp	.+208    	; 0x1a6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	66 c0       	rjmp	.+204    	; 0x1a6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	64 c0       	rjmp	.+200    	; 0x1a6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	62 c0       	rjmp	.+196    	; 0x1a6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <main+0x96>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	ec e3       	ldi	r30, 0x3C	; 60
     17e:	fe e1       	ldi	r31, 0x1E	; 30
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	ae 30       	cpi	r26, 0x0E	; 14
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	22 e0       	ldi	r18, 0x02	; 2
     192:	ae e0       	ldi	r26, 0x0E	; 14
     194:	b2 e0       	ldi	r27, 0x02	; 2
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a6 32       	cpi	r26, 0x26	; 38
     19c:	b2 07       	cpc	r27, r18
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	94 d3       	rcall	.+1832   	; 0x8ca <main>
     1a2:	0c 94 1c 0f 	jmp	0x1e38	; 0x1e38 <_exit>

000001a6 <__bad_interrupt>:
     1a6:	2c cf       	rjmp	.-424    	; 0x0 <__vectors>

000001a8 <lcd_set_4bit>:
void servo_1(unsigned char degrees)  
{
 float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
 OCR1AH = 0x00;
 OCR1AL = (unsigned char) PositionPanServo;
     1a8:	86 e6       	ldi	r24, 0x66	; 102
     1aa:	9e e0       	ldi	r25, 0x0E	; 14
     1ac:	01 97       	sbiw	r24, 0x01	; 1
     1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd_set_4bit+0x4>
     1b0:	00 00       	nop
     1b2:	40 98       	cbi	0x08, 0	; 8
     1b4:	41 98       	cbi	0x08, 1	; 8
     1b6:	80 e3       	ldi	r24, 0x30	; 48
     1b8:	88 b9       	out	0x08, r24	; 8
     1ba:	42 9a       	sbi	0x08, 2	; 8
     1bc:	8f ef       	ldi	r24, 0xFF	; 255
     1be:	97 e4       	ldi	r25, 0x47	; 71
     1c0:	01 97       	sbiw	r24, 0x01	; 1
     1c2:	f1 f7       	brne	.-4      	; 0x1c0 <lcd_set_4bit+0x18>
     1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <lcd_set_4bit+0x1e>
     1c6:	00 00       	nop
     1c8:	42 98       	cbi	0x08, 2	; 8
     1ca:	86 e6       	ldi	r24, 0x66	; 102
     1cc:	9e e0       	ldi	r25, 0x0E	; 14
     1ce:	01 97       	sbiw	r24, 0x01	; 1
     1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcd_set_4bit+0x26>
     1d2:	00 00       	nop
     1d4:	40 98       	cbi	0x08, 0	; 8
     1d6:	41 98       	cbi	0x08, 1	; 8
     1d8:	80 e3       	ldi	r24, 0x30	; 48
     1da:	88 b9       	out	0x08, r24	; 8
     1dc:	42 9a       	sbi	0x08, 2	; 8
     1de:	8f ef       	ldi	r24, 0xFF	; 255
     1e0:	97 e4       	ldi	r25, 0x47	; 71
     1e2:	01 97       	sbiw	r24, 0x01	; 1
     1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_set_4bit+0x3a>
     1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <lcd_set_4bit+0x40>
     1e8:	00 00       	nop
     1ea:	42 98       	cbi	0x08, 2	; 8
     1ec:	86 e6       	ldi	r24, 0x66	; 102
     1ee:	9e e0       	ldi	r25, 0x0E	; 14
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_set_4bit+0x48>
     1f4:	00 00       	nop
     1f6:	40 98       	cbi	0x08, 0	; 8
     1f8:	41 98       	cbi	0x08, 1	; 8
     1fa:	80 e3       	ldi	r24, 0x30	; 48
     1fc:	88 b9       	out	0x08, r24	; 8
     1fe:	42 9a       	sbi	0x08, 2	; 8
     200:	8f ef       	ldi	r24, 0xFF	; 255
     202:	97 e4       	ldi	r25, 0x47	; 71
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <lcd_set_4bit+0x5c>
     208:	00 c0       	rjmp	.+0      	; 0x20a <lcd_set_4bit+0x62>
     20a:	00 00       	nop
     20c:	42 98       	cbi	0x08, 2	; 8
     20e:	86 e6       	ldi	r24, 0x66	; 102
     210:	9e e0       	ldi	r25, 0x0E	; 14
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	f1 f7       	brne	.-4      	; 0x212 <lcd_set_4bit+0x6a>
     216:	00 00       	nop
     218:	40 98       	cbi	0x08, 0	; 8
     21a:	41 98       	cbi	0x08, 1	; 8
     21c:	80 e2       	ldi	r24, 0x20	; 32
     21e:	88 b9       	out	0x08, r24	; 8
     220:	42 9a       	sbi	0x08, 2	; 8
     222:	8f ef       	ldi	r24, 0xFF	; 255
     224:	97 e4       	ldi	r25, 0x47	; 71
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <lcd_set_4bit+0x7e>
     22a:	00 c0       	rjmp	.+0      	; 0x22c <lcd_set_4bit+0x84>
     22c:	00 00       	nop
     22e:	42 98       	cbi	0x08, 2	; 8
     230:	08 95       	ret

00000232 <lcd_wr_command>:
     232:	98 b1       	in	r25, 0x08	; 8
     234:	9f 70       	andi	r25, 0x0F	; 15
     236:	98 b9       	out	0x08, r25	; 8
     238:	98 b1       	in	r25, 0x08	; 8
     23a:	28 2f       	mov	r18, r24
     23c:	20 7f       	andi	r18, 0xF0	; 240
     23e:	92 2b       	or	r25, r18
     240:	98 b9       	out	0x08, r25	; 8
     242:	40 98       	cbi	0x08, 0	; 8
     244:	41 98       	cbi	0x08, 1	; 8
     246:	42 9a       	sbi	0x08, 2	; 8
     248:	ef ef       	ldi	r30, 0xFF	; 255
     24a:	f7 e4       	ldi	r31, 0x47	; 71
     24c:	31 97       	sbiw	r30, 0x01	; 1
     24e:	f1 f7       	brne	.-4      	; 0x24c <lcd_wr_command+0x1a>
     250:	00 c0       	rjmp	.+0      	; 0x252 <lcd_wr_command+0x20>
     252:	00 00       	nop
     254:	42 98       	cbi	0x08, 2	; 8
     256:	98 b1       	in	r25, 0x08	; 8
     258:	9f 70       	andi	r25, 0x0F	; 15
     25a:	98 b9       	out	0x08, r25	; 8
     25c:	98 b1       	in	r25, 0x08	; 8
     25e:	82 95       	swap	r24
     260:	80 7f       	andi	r24, 0xF0	; 240
     262:	89 2b       	or	r24, r25
     264:	88 b9       	out	0x08, r24	; 8
     266:	40 98       	cbi	0x08, 0	; 8
     268:	41 98       	cbi	0x08, 1	; 8
     26a:	42 9a       	sbi	0x08, 2	; 8
     26c:	8f ef       	ldi	r24, 0xFF	; 255
     26e:	97 e4       	ldi	r25, 0x47	; 71
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <lcd_wr_command+0x3e>
     274:	00 c0       	rjmp	.+0      	; 0x276 <lcd_wr_command+0x44>
     276:	00 00       	nop
     278:	42 98       	cbi	0x08, 2	; 8
     27a:	08 95       	ret

0000027c <lcd_init>:
     27c:	86 e6       	ldi	r24, 0x66	; 102
     27e:	9e e0       	ldi	r25, 0x0E	; 14
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	f1 f7       	brne	.-4      	; 0x280 <lcd_init+0x4>
     284:	00 00       	nop
     286:	88 e2       	ldi	r24, 0x28	; 40
     288:	d4 df       	rcall	.-88     	; 0x232 <lcd_wr_command>
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	d2 df       	rcall	.-92     	; 0x232 <lcd_wr_command>
     28e:	86 e0       	ldi	r24, 0x06	; 6
     290:	d0 df       	rcall	.-96     	; 0x232 <lcd_wr_command>
     292:	8e e0       	ldi	r24, 0x0E	; 14
     294:	ce df       	rcall	.-100    	; 0x232 <lcd_wr_command>
     296:	80 e8       	ldi	r24, 0x80	; 128
     298:	cc cf       	rjmp	.-104    	; 0x232 <lcd_wr_command>
     29a:	08 95       	ret

0000029c <lcd_wr_char>:
     29c:	98 b1       	in	r25, 0x08	; 8
     29e:	9f 70       	andi	r25, 0x0F	; 15
     2a0:	98 b9       	out	0x08, r25	; 8
     2a2:	98 b1       	in	r25, 0x08	; 8
     2a4:	28 2f       	mov	r18, r24
     2a6:	20 7f       	andi	r18, 0xF0	; 240
     2a8:	92 2b       	or	r25, r18
     2aa:	98 b9       	out	0x08, r25	; 8
     2ac:	40 9a       	sbi	0x08, 0	; 8
     2ae:	41 98       	cbi	0x08, 1	; 8
     2b0:	42 9a       	sbi	0x08, 2	; 8
     2b2:	ef ef       	ldi	r30, 0xFF	; 255
     2b4:	f7 e4       	ldi	r31, 0x47	; 71
     2b6:	31 97       	sbiw	r30, 0x01	; 1
     2b8:	f1 f7       	brne	.-4      	; 0x2b6 <lcd_wr_char+0x1a>
     2ba:	00 c0       	rjmp	.+0      	; 0x2bc <lcd_wr_char+0x20>
     2bc:	00 00       	nop
     2be:	42 98       	cbi	0x08, 2	; 8
     2c0:	98 b1       	in	r25, 0x08	; 8
     2c2:	9f 70       	andi	r25, 0x0F	; 15
     2c4:	98 b9       	out	0x08, r25	; 8
     2c6:	98 b1       	in	r25, 0x08	; 8
     2c8:	82 95       	swap	r24
     2ca:	80 7f       	andi	r24, 0xF0	; 240
     2cc:	89 2b       	or	r24, r25
     2ce:	88 b9       	out	0x08, r24	; 8
     2d0:	40 9a       	sbi	0x08, 0	; 8
     2d2:	41 98       	cbi	0x08, 1	; 8
     2d4:	42 9a       	sbi	0x08, 2	; 8
     2d6:	8f ef       	ldi	r24, 0xFF	; 255
     2d8:	97 e4       	ldi	r25, 0x47	; 71
     2da:	01 97       	sbiw	r24, 0x01	; 1
     2dc:	f1 f7       	brne	.-4      	; 0x2da <lcd_wr_char+0x3e>
     2de:	00 c0       	rjmp	.+0      	; 0x2e0 <lcd_wr_char+0x44>
     2e0:	00 00       	nop
     2e2:	42 98       	cbi	0x08, 2	; 8
     2e4:	08 95       	ret

000002e6 <lcd_home>:
     2e6:	80 e8       	ldi	r24, 0x80	; 128
     2e8:	a4 cf       	rjmp	.-184    	; 0x232 <lcd_wr_command>
     2ea:	08 95       	ret

000002ec <lcd_string>:
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	ec 01       	movw	r28, r24
     2f2:	88 81       	ld	r24, Y
     2f4:	88 23       	and	r24, r24
     2f6:	29 f0       	breq	.+10     	; 0x302 <lcd_string+0x16>
     2f8:	21 96       	adiw	r28, 0x01	; 1
     2fa:	d0 df       	rcall	.-96     	; 0x29c <lcd_wr_char>
     2fc:	89 91       	ld	r24, Y+
     2fe:	81 11       	cpse	r24, r1
     300:	fc cf       	rjmp	.-8      	; 0x2fa <lcd_string+0xe>
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	08 95       	ret

00000308 <lcd_cursor>:
     308:	82 30       	cpi	r24, 0x02	; 2
     30a:	69 f0       	breq	.+26     	; 0x326 <lcd_cursor+0x1e>
     30c:	18 f4       	brcc	.+6      	; 0x314 <lcd_cursor+0xc>
     30e:	81 30       	cpi	r24, 0x01	; 1
     310:	31 f0       	breq	.+12     	; 0x31e <lcd_cursor+0x16>
     312:	08 95       	ret
     314:	83 30       	cpi	r24, 0x03	; 3
     316:	59 f0       	breq	.+22     	; 0x32e <lcd_cursor+0x26>
     318:	84 30       	cpi	r24, 0x04	; 4
     31a:	69 f0       	breq	.+26     	; 0x336 <lcd_cursor+0x2e>
     31c:	08 95       	ret
     31e:	8f e7       	ldi	r24, 0x7F	; 127
     320:	86 0f       	add	r24, r22
     322:	87 cf       	rjmp	.-242    	; 0x232 <lcd_wr_command>
     324:	08 95       	ret
     326:	8f eb       	ldi	r24, 0xBF	; 191
     328:	86 0f       	add	r24, r22
     32a:	83 cf       	rjmp	.-250    	; 0x232 <lcd_wr_command>
     32c:	08 95       	ret
     32e:	83 e9       	ldi	r24, 0x93	; 147
     330:	86 0f       	add	r24, r22
     332:	7f cf       	rjmp	.-258    	; 0x232 <lcd_wr_command>
     334:	08 95       	ret
     336:	83 ed       	ldi	r24, 0xD3	; 211
     338:	86 0f       	add	r24, r22
     33a:	7b cf       	rjmp	.-266    	; 0x232 <lcd_wr_command>
     33c:	08 95       	ret

0000033e <lcd_print>:
     33e:	0f 93       	push	r16
     340:	1f 93       	push	r17
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	8a 01       	movw	r16, r20
     348:	e9 01       	movw	r28, r18
     34a:	88 23       	and	r24, r24
     34c:	11 f0       	breq	.+4      	; 0x352 <lcd_print+0x14>
     34e:	61 11       	cpse	r22, r1
     350:	02 c0       	rjmp	.+4      	; 0x356 <lcd_print+0x18>
     352:	c9 df       	rcall	.-110    	; 0x2e6 <lcd_home>
     354:	01 c0       	rjmp	.+2      	; 0x358 <lcd_print+0x1a>
     356:	d8 df       	rcall	.-80     	; 0x308 <lcd_cursor>
     358:	c5 30       	cpi	r28, 0x05	; 5
     35a:	d1 05       	cpc	r29, r1
     35c:	09 f0       	breq	.+2      	; 0x360 <lcd_print+0x22>
     35e:	d5 c0       	rjmp	.+426    	; 0x50a <lcd_print+0x1cc>
     360:	98 01       	movw	r18, r16
     362:	32 95       	swap	r19
     364:	22 95       	swap	r18
     366:	2f 70       	andi	r18, 0x0F	; 15
     368:	23 27       	eor	r18, r19
     36a:	3f 70       	andi	r19, 0x0F	; 15
     36c:	23 27       	eor	r18, r19
     36e:	a7 e4       	ldi	r26, 0x47	; 71
     370:	b3 e0       	ldi	r27, 0x03	; 3
     372:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__umulhisi3>
     376:	96 95       	lsr	r25
     378:	87 95       	ror	r24
     37a:	96 95       	lsr	r25
     37c:	87 95       	ror	r24
     37e:	96 95       	lsr	r25
     380:	87 95       	ror	r24
     382:	c0 96       	adiw	r24, 0x30	; 48
     384:	90 93 13 02 	sts	0x0213, r25
     388:	80 93 12 02 	sts	0x0212, r24
     38c:	87 df       	rcall	.-242    	; 0x29c <lcd_wr_char>
     38e:	98 01       	movw	r18, r16
     390:	36 95       	lsr	r19
     392:	27 95       	ror	r18
     394:	36 95       	lsr	r19
     396:	27 95       	ror	r18
     398:	36 95       	lsr	r19
     39a:	27 95       	ror	r18
     39c:	a5 ec       	ldi	r26, 0xC5	; 197
     39e:	b0 e2       	ldi	r27, 0x20	; 32
     3a0:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__umulhisi3>
     3a4:	ac 01       	movw	r20, r24
     3a6:	52 95       	swap	r21
     3a8:	42 95       	swap	r20
     3aa:	4f 70       	andi	r20, 0x0F	; 15
     3ac:	45 27       	eor	r20, r21
     3ae:	5f 70       	andi	r21, 0x0F	; 15
     3b0:	45 27       	eor	r20, r21
     3b2:	50 93 16 02 	sts	0x0216, r21
     3b6:	40 93 15 02 	sts	0x0215, r20
     3ba:	9a 01       	movw	r18, r20
     3bc:	ad ec       	ldi	r26, 0xCD	; 205
     3be:	bc ec       	ldi	r27, 0xCC	; 204
     3c0:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__umulhisi3>
     3c4:	96 95       	lsr	r25
     3c6:	87 95       	ror	r24
     3c8:	96 95       	lsr	r25
     3ca:	87 95       	ror	r24
     3cc:	96 95       	lsr	r25
     3ce:	87 95       	ror	r24
     3d0:	9c 01       	movw	r18, r24
     3d2:	22 0f       	add	r18, r18
     3d4:	33 1f       	adc	r19, r19
     3d6:	88 0f       	add	r24, r24
     3d8:	99 1f       	adc	r25, r25
     3da:	88 0f       	add	r24, r24
     3dc:	99 1f       	adc	r25, r25
     3de:	88 0f       	add	r24, r24
     3e0:	99 1f       	adc	r25, r25
     3e2:	82 0f       	add	r24, r18
     3e4:	93 1f       	adc	r25, r19
     3e6:	48 1b       	sub	r20, r24
     3e8:	59 0b       	sbc	r21, r25
     3ea:	ca 01       	movw	r24, r20
     3ec:	c0 96       	adiw	r24, 0x30	; 48
     3ee:	90 93 23 02 	sts	0x0223, r25
     3f2:	80 93 22 02 	sts	0x0222, r24
     3f6:	52 df       	rcall	.-348    	; 0x29c <lcd_wr_char>
     3f8:	04 c0       	rjmp	.+8      	; 0x402 <lcd_print+0xc4>
     3fa:	c3 30       	cpi	r28, 0x03	; 3
     3fc:	d1 05       	cpc	r29, r1
     3fe:	09 f0       	breq	.+2      	; 0x402 <lcd_print+0xc4>
     400:	89 c0       	rjmp	.+274    	; 0x514 <lcd_print+0x1d6>
     402:	98 01       	movw	r18, r16
     404:	36 95       	lsr	r19
     406:	27 95       	ror	r18
     408:	36 95       	lsr	r19
     40a:	27 95       	ror	r18
     40c:	ab e7       	ldi	r26, 0x7B	; 123
     40e:	b4 e1       	ldi	r27, 0x14	; 20
     410:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__umulhisi3>
     414:	ac 01       	movw	r20, r24
     416:	56 95       	lsr	r21
     418:	47 95       	ror	r20
     41a:	50 93 16 02 	sts	0x0216, r21
     41e:	40 93 15 02 	sts	0x0215, r20
     422:	9a 01       	movw	r18, r20
     424:	ad ec       	ldi	r26, 0xCD	; 205
     426:	bc ec       	ldi	r27, 0xCC	; 204
     428:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__umulhisi3>
     42c:	96 95       	lsr	r25
     42e:	87 95       	ror	r24
     430:	96 95       	lsr	r25
     432:	87 95       	ror	r24
     434:	96 95       	lsr	r25
     436:	87 95       	ror	r24
     438:	9c 01       	movw	r18, r24
     43a:	22 0f       	add	r18, r18
     43c:	33 1f       	adc	r19, r19
     43e:	88 0f       	add	r24, r24
     440:	99 1f       	adc	r25, r25
     442:	88 0f       	add	r24, r24
     444:	99 1f       	adc	r25, r25
     446:	88 0f       	add	r24, r24
     448:	99 1f       	adc	r25, r25
     44a:	82 0f       	add	r24, r18
     44c:	93 1f       	adc	r25, r19
     44e:	48 1b       	sub	r20, r24
     450:	59 0b       	sbc	r21, r25
     452:	ca 01       	movw	r24, r20
     454:	c0 96       	adiw	r24, 0x30	; 48
     456:	90 93 1e 02 	sts	0x021E, r25
     45a:	80 93 1d 02 	sts	0x021D, r24
     45e:	1e df       	rcall	.-452    	; 0x29c <lcd_wr_char>
     460:	98 01       	movw	r18, r16
     462:	ad ec       	ldi	r26, 0xCD	; 205
     464:	bc ec       	ldi	r27, 0xCC	; 204
     466:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__umulhisi3>
     46a:	ac 01       	movw	r20, r24
     46c:	56 95       	lsr	r21
     46e:	47 95       	ror	r20
     470:	56 95       	lsr	r21
     472:	47 95       	ror	r20
     474:	56 95       	lsr	r21
     476:	47 95       	ror	r20
     478:	50 93 16 02 	sts	0x0216, r21
     47c:	40 93 15 02 	sts	0x0215, r20
     480:	9a 01       	movw	r18, r20
     482:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__umulhisi3>
     486:	96 95       	lsr	r25
     488:	87 95       	ror	r24
     48a:	96 95       	lsr	r25
     48c:	87 95       	ror	r24
     48e:	96 95       	lsr	r25
     490:	87 95       	ror	r24
     492:	9c 01       	movw	r18, r24
     494:	22 0f       	add	r18, r18
     496:	33 1f       	adc	r19, r19
     498:	88 0f       	add	r24, r24
     49a:	99 1f       	adc	r25, r25
     49c:	88 0f       	add	r24, r24
     49e:	99 1f       	adc	r25, r25
     4a0:	88 0f       	add	r24, r24
     4a2:	99 1f       	adc	r25, r25
     4a4:	82 0f       	add	r24, r18
     4a6:	93 1f       	adc	r25, r19
     4a8:	48 1b       	sub	r20, r24
     4aa:	59 0b       	sbc	r21, r25
     4ac:	ca 01       	movw	r24, r20
     4ae:	c0 96       	adiw	r24, 0x30	; 48
     4b0:	90 93 1c 02 	sts	0x021C, r25
     4b4:	80 93 1b 02 	sts	0x021B, r24
     4b8:	f1 de       	rcall	.-542    	; 0x29c <lcd_wr_char>
     4ba:	03 c0       	rjmp	.+6      	; 0x4c2 <lcd_print+0x184>
     4bc:	c1 30       	cpi	r28, 0x01	; 1
     4be:	d1 05       	cpc	r29, r1
     4c0:	f9 f4       	brne	.+62     	; 0x500 <lcd_print+0x1c2>
     4c2:	98 01       	movw	r18, r16
     4c4:	ad ec       	ldi	r26, 0xCD	; 205
     4c6:	bc ec       	ldi	r27, 0xCC	; 204
     4c8:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__umulhisi3>
     4cc:	96 95       	lsr	r25
     4ce:	87 95       	ror	r24
     4d0:	96 95       	lsr	r25
     4d2:	87 95       	ror	r24
     4d4:	96 95       	lsr	r25
     4d6:	87 95       	ror	r24
     4d8:	9c 01       	movw	r18, r24
     4da:	22 0f       	add	r18, r18
     4dc:	33 1f       	adc	r19, r19
     4de:	88 0f       	add	r24, r24
     4e0:	99 1f       	adc	r25, r25
     4e2:	88 0f       	add	r24, r24
     4e4:	99 1f       	adc	r25, r25
     4e6:	88 0f       	add	r24, r24
     4e8:	99 1f       	adc	r25, r25
     4ea:	82 0f       	add	r24, r18
     4ec:	93 1f       	adc	r25, r19
     4ee:	08 1b       	sub	r16, r24
     4f0:	19 0b       	sbc	r17, r25
     4f2:	c8 01       	movw	r24, r16
     4f4:	c0 96       	adiw	r24, 0x30	; 48
     4f6:	90 93 21 02 	sts	0x0221, r25
     4fa:	80 93 20 02 	sts	0x0220, r24
     4fe:	ce de       	rcall	.-612    	; 0x29c <lcd_wr_char>
     500:	26 97       	sbiw	r28, 0x06	; 6
     502:	64 f0       	brlt	.+24     	; 0x51c <lcd_print+0x1de>
     504:	85 e4       	ldi	r24, 0x45	; 69
     506:	ca de       	rcall	.-620    	; 0x29c <lcd_wr_char>
     508:	09 c0       	rjmp	.+18     	; 0x51c <lcd_print+0x1de>
     50a:	c4 30       	cpi	r28, 0x04	; 4
     50c:	d1 05       	cpc	r29, r1
     50e:	09 f0       	breq	.+2      	; 0x512 <lcd_print+0x1d4>
     510:	74 cf       	rjmp	.-280    	; 0x3fa <lcd_print+0xbc>
     512:	3d cf       	rjmp	.-390    	; 0x38e <lcd_print+0x50>
     514:	c2 30       	cpi	r28, 0x02	; 2
     516:	d1 05       	cpc	r29, r1
     518:	89 f6       	brne	.-94     	; 0x4bc <lcd_print+0x17e>
     51a:	a2 cf       	rjmp	.-188    	; 0x460 <lcd_print+0x122>
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	0f 91       	pop	r16
     524:	08 95       	ret

00000526 <buzzer_pin_config>:
     526:	3b 9a       	sbi	0x07, 3	; 7
     528:	43 98       	cbi	0x08, 3	; 8
     52a:	08 95       	ret

0000052c <buzzer_on>:
     52c:	86 b1       	in	r24, 0x06	; 6
     52e:	88 60       	ori	r24, 0x08	; 8
     530:	88 b9       	out	0x08, r24	; 8
     532:	08 95       	ret

00000534 <binit_devices>:
     534:	f8 94       	cli
     536:	f7 df       	rcall	.-18     	; 0x526 <buzzer_pin_config>
     538:	78 94       	sei
     53a:	08 95       	ret

0000053c <lcd_port_config>:
     53c:	87 b1       	in	r24, 0x07	; 7
     53e:	87 6f       	ori	r24, 0xF7	; 247
     540:	87 b9       	out	0x07, r24	; 7
     542:	88 b1       	in	r24, 0x08	; 8
     544:	80 78       	andi	r24, 0x80	; 128
     546:	88 b9       	out	0x08, r24	; 8
     548:	08 95       	ret

0000054a <adc_pin_config>:
     54a:	10 ba       	out	0x10, r1	; 16
     54c:	11 ba       	out	0x11, r1	; 17
     54e:	10 92 07 01 	sts	0x0107, r1
     552:	10 92 08 01 	sts	0x0108, r1
     556:	08 95       	ret

00000558 <adc_init>:
     558:	ea e7       	ldi	r30, 0x7A	; 122
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	10 82       	st	Z, r1
     55e:	10 92 7b 00 	sts	0x007B, r1
     562:	80 e2       	ldi	r24, 0x20	; 32
     564:	80 93 7c 00 	sts	0x007C, r24
     568:	80 e8       	ldi	r24, 0x80	; 128
     56a:	80 bf       	out	0x30, r24	; 48
     56c:	86 e8       	ldi	r24, 0x86	; 134
     56e:	80 83       	st	Z, r24
     570:	08 95       	ret

00000572 <ADC_Conversion>:
     572:	88 30       	cpi	r24, 0x08	; 8
     574:	18 f0       	brcs	.+6      	; 0x57c <ADC_Conversion+0xa>
     576:	98 e0       	ldi	r25, 0x08	; 8
     578:	90 93 7b 00 	sts	0x007B, r25
     57c:	87 70       	andi	r24, 0x07	; 7
     57e:	80 62       	ori	r24, 0x20	; 32
     580:	80 93 7c 00 	sts	0x007C, r24
     584:	ea e7       	ldi	r30, 0x7A	; 122
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	80 81       	ld	r24, Z
     58a:	80 64       	ori	r24, 0x40	; 64
     58c:	80 83       	st	Z, r24
     58e:	80 81       	ld	r24, Z
     590:	84 ff       	sbrs	r24, 4
     592:	fd cf       	rjmp	.-6      	; 0x58e <ADC_Conversion+0x1c>
     594:	80 91 79 00 	lds	r24, 0x0079
     598:	ea e7       	ldi	r30, 0x7A	; 122
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	90 81       	ld	r25, Z
     59e:	90 61       	ori	r25, 0x10	; 16
     5a0:	90 83       	st	Z, r25
     5a2:	10 92 7b 00 	sts	0x007B, r1
     5a6:	08 95       	ret

000005a8 <Sharp_GP2D12_estimation>:
     5a8:	68 2f       	mov	r22, r24
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 b7 0c 	call	0x196e	; 0x196e <__floatunsisf>
     5b4:	2f ee       	ldi	r18, 0xEF	; 239
     5b6:	39 ec       	ldi	r19, 0xC9	; 201
     5b8:	43 e9       	ldi	r20, 0x93	; 147
     5ba:	5f e3       	ldi	r21, 0x3F	; 63
     5bc:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <pow>
     5c0:	9b 01       	movw	r18, r22
     5c2:	ac 01       	movw	r20, r24
     5c4:	60 e0       	ldi	r22, 0x00	; 0
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	80 e8       	ldi	r24, 0x80	; 128
     5ca:	9f e3       	ldi	r25, 0x3F	; 63
     5cc:	0e 94 1e 0c 	call	0x183c	; 0x183c <__divsf3>
     5d0:	2a e9       	ldi	r18, 0x9A	; 154
     5d2:	39 ef       	ldi	r19, 0xF9	; 249
     5d4:	4e e2       	ldi	r20, 0x2E	; 46
     5d6:	55 e4       	ldi	r21, 0x45	; 69
     5d8:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__mulsf3>
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	40 e2       	ldi	r20, 0x20	; 32
     5e2:	51 e4       	ldi	r21, 0x41	; 65
     5e4:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__mulsf3>
     5e8:	0e 94 86 0c 	call	0x190c	; 0x190c <__fixsfsi>
     5ec:	cb 01       	movw	r24, r22
     5ee:	61 32       	cpi	r22, 0x21	; 33
     5f0:	23 e0       	ldi	r18, 0x03	; 3
     5f2:	72 07       	cpc	r23, r18
     5f4:	10 f0       	brcs	.+4      	; 0x5fa <Sharp_GP2D12_estimation+0x52>
     5f6:	80 e2       	ldi	r24, 0x20	; 32
     5f8:	93 e0       	ldi	r25, 0x03	; 3
     5fa:	08 95       	ret

000005fc <motion_pin_config>:
     5fc:	81 b1       	in	r24, 0x01	; 1
     5fe:	8f 60       	ori	r24, 0x0F	; 15
     600:	81 b9       	out	0x01, r24	; 1
     602:	82 b1       	in	r24, 0x02	; 2
     604:	80 7f       	andi	r24, 0xF0	; 240
     606:	82 b9       	out	0x02, r24	; 2
     608:	ea e0       	ldi	r30, 0x0A	; 10
     60a:	f1 e0       	ldi	r31, 0x01	; 1
     60c:	80 81       	ld	r24, Z
     60e:	88 61       	ori	r24, 0x18	; 24
     610:	80 83       	st	Z, r24
     612:	eb e0       	ldi	r30, 0x0B	; 11
     614:	f1 e0       	ldi	r31, 0x01	; 1
     616:	80 81       	ld	r24, Z
     618:	88 61       	ori	r24, 0x18	; 24
     61a:	80 83       	st	Z, r24
     61c:	08 95       	ret

0000061e <port_init>:
     61e:	8e df       	rcall	.-228    	; 0x53c <lcd_port_config>
     620:	94 df       	rcall	.-216    	; 0x54a <adc_pin_config>
     622:	ec cf       	rjmp	.-40     	; 0x5fc <motion_pin_config>
     624:	08 95       	ret

00000626 <motion_set>:
     626:	92 b1       	in	r25, 0x02	; 2
     628:	90 7f       	andi	r25, 0xF0	; 240
     62a:	8f 70       	andi	r24, 0x0F	; 15
     62c:	98 2b       	or	r25, r24
     62e:	92 b9       	out	0x02, r25	; 2
     630:	08 95       	ret

00000632 <forward>:
     632:	86 e0       	ldi	r24, 0x06	; 6
     634:	f8 cf       	rjmp	.-16     	; 0x626 <motion_set>
     636:	08 95       	ret

00000638 <stop>:
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	f5 cf       	rjmp	.-22     	; 0x626 <motion_set>
     63c:	08 95       	ret

0000063e <left>:
     63e:	85 e0       	ldi	r24, 0x05	; 5
     640:	f2 cf       	rjmp	.-28     	; 0x626 <motion_set>
     642:	08 95       	ret

00000644 <right>:
     644:	8a e0       	ldi	r24, 0x0A	; 10
     646:	ef cf       	rjmp	.-34     	; 0x626 <motion_set>
     648:	08 95       	ret

0000064a <back>:
     64a:	89 e0       	ldi	r24, 0x09	; 9
     64c:	ec cf       	rjmp	.-40     	; 0x626 <motion_set>
     64e:	08 95       	ret

00000650 <soft_left>:
     650:	84 e0       	ldi	r24, 0x04	; 4
     652:	e9 cf       	rjmp	.-46     	; 0x626 <motion_set>
     654:	08 95       	ret

00000656 <soft_right>:
     656:	82 e0       	ldi	r24, 0x02	; 2
     658:	e6 cf       	rjmp	.-52     	; 0x626 <motion_set>
     65a:	08 95       	ret

0000065c <servo1_pin_config>:
     65c:	25 9a       	sbi	0x04, 5	; 4
     65e:	2d 9a       	sbi	0x05, 5	; 5
     660:	08 95       	ret

00000662 <servo2_pin_config>:
     662:	26 9a       	sbi	0x04, 6	; 4
     664:	2e 9a       	sbi	0x05, 6	; 5
     666:	08 95       	ret

00000668 <s_port_init>:
     668:	f9 df       	rcall	.-14     	; 0x65c <servo1_pin_config>
     66a:	fb cf       	rjmp	.-10     	; 0x662 <servo2_pin_config>
     66c:	08 95       	ret

0000066e <timer5_init>:
     66e:	e1 e2       	ldi	r30, 0x21	; 33
     670:	f1 e0       	ldi	r31, 0x01	; 1
     672:	10 82       	st	Z, r1
     674:	8f ef       	ldi	r24, 0xFF	; 255
     676:	80 93 25 01 	sts	0x0125, r24
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	90 93 24 01 	sts	0x0124, r25
     680:	10 92 29 01 	sts	0x0129, r1
     684:	80 93 28 01 	sts	0x0128, r24
     688:	10 92 2b 01 	sts	0x012B, r1
     68c:	80 93 2a 01 	sts	0x012A, r24
     690:	10 92 2d 01 	sts	0x012D, r1
     694:	80 93 2c 01 	sts	0x012C, r24
     698:	89 ea       	ldi	r24, 0xA9	; 169
     69a:	80 93 20 01 	sts	0x0120, r24
     69e:	8b e0       	ldi	r24, 0x0B	; 11
     6a0:	80 83       	st	Z, r24
     6a2:	08 95       	ret

000006a4 <init_devices>:
     6a4:	f8 94       	cli
     6a6:	bb df       	rcall	.-138    	; 0x61e <port_init>
     6a8:	57 df       	rcall	.-338    	; 0x558 <adc_init>
     6aa:	e8 dd       	rcall	.-1072   	; 0x27c <lcd_init>
     6ac:	e0 df       	rcall	.-64     	; 0x66e <timer5_init>
     6ae:	78 94       	sei
     6b0:	08 95       	ret

000006b2 <timer1_init>:
     6b2:	e1 e8       	ldi	r30, 0x81	; 129
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	10 82       	st	Z, r1
     6b8:	8c ef       	ldi	r24, 0xFC	; 252
     6ba:	80 93 85 00 	sts	0x0085, r24
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	80 93 84 00 	sts	0x0084, r24
     6c4:	93 e0       	ldi	r25, 0x03	; 3
     6c6:	90 93 89 00 	sts	0x0089, r25
     6ca:	8f ef       	ldi	r24, 0xFF	; 255
     6cc:	80 93 88 00 	sts	0x0088, r24
     6d0:	90 93 8b 00 	sts	0x008B, r25
     6d4:	80 93 8a 00 	sts	0x008A, r24
     6d8:	90 93 8d 00 	sts	0x008D, r25
     6dc:	80 93 8c 00 	sts	0x008C, r24
     6e0:	90 93 87 00 	sts	0x0087, r25
     6e4:	80 93 86 00 	sts	0x0086, r24
     6e8:	8b ea       	ldi	r24, 0xAB	; 171
     6ea:	80 93 80 00 	sts	0x0080, r24
     6ee:	10 92 82 00 	sts	0x0082, r1
     6f2:	8c e0       	ldi	r24, 0x0C	; 12
     6f4:	80 83       	st	Z, r24
     6f6:	08 95       	ret

000006f8 <sinit_devices>:
     6f8:	f8 94       	cli
     6fa:	b6 df       	rcall	.-148    	; 0x668 <s_port_init>
     6fc:	da df       	rcall	.-76     	; 0x6b2 <timer1_init>
     6fe:	78 94       	sei
     700:	08 95       	ret

00000702 <down_pick_up>:
     702:	10 92 89 00 	sts	0x0089, r1
     706:	83 e2       	ldi	r24, 0x23	; 35
     708:	80 93 88 00 	sts	0x0088, r24
     70c:	2f ef       	ldi	r18, 0xFF	; 255
     70e:	8f e7       	ldi	r24, 0x7F	; 127
     710:	9a e3       	ldi	r25, 0x3A	; 58
     712:	21 50       	subi	r18, 0x01	; 1
     714:	80 40       	sbci	r24, 0x00	; 0
     716:	90 40       	sbci	r25, 0x00	; 0
     718:	e1 f7       	brne	.-8      	; 0x712 <down_pick_up+0x10>
     71a:	00 c0       	rjmp	.+0      	; 0x71c <down_pick_up+0x1a>
     71c:	00 00       	nop
     71e:	10 92 8b 00 	sts	0x008B, r1
     722:	8e e4       	ldi	r24, 0x4E	; 78
     724:	80 93 8a 00 	sts	0x008A, r24
     728:	2f ef       	ldi	r18, 0xFF	; 255
     72a:	8f e7       	ldi	r24, 0x7F	; 127
     72c:	9a e3       	ldi	r25, 0x3A	; 58
     72e:	21 50       	subi	r18, 0x01	; 1
     730:	80 40       	sbci	r24, 0x00	; 0
     732:	90 40       	sbci	r25, 0x00	; 0
     734:	e1 f7       	brne	.-8      	; 0x72e <down_pick_up+0x2c>
     736:	00 c0       	rjmp	.+0      	; 0x738 <down_pick_up+0x36>
     738:	00 00       	nop
     73a:	10 92 89 00 	sts	0x0089, r1
     73e:	83 e5       	ldi	r24, 0x53	; 83
     740:	80 93 88 00 	sts	0x0088, r24
     744:	08 95       	ret

00000746 <place>:
     746:	10 92 8b 00 	sts	0x008B, r1
     74a:	83 e2       	ldi	r24, 0x23	; 35
     74c:	80 93 8a 00 	sts	0x008A, r24
     750:	08 95       	ret

00000752 <natural_behav>:


		
//this function is used for aligning the bot on the black line while moving forward
void natural_behav(void)
{
     752:	ef 92       	push	r14
     754:	ff 92       	push	r15
     756:	0f 93       	push	r16
     758:	1f 93       	push	r17
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
	unsigned int left_sensor=ADC_Conversion(1);
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	08 df       	rcall	.-496    	; 0x572 <ADC_Conversion>
     762:	c8 2f       	mov	r28, r24
     764:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned int right_sensor=ADC_Conversion(3);
     766:	83 e0       	ldi	r24, 0x03	; 3
     768:	04 df       	rcall	.-504    	; 0x572 <ADC_Conversion>
     76a:	e8 2e       	mov	r14, r24
     76c:	f1 2c       	mov	r15, r1
	unsigned int centre_sensor=ADC_Conversion(2);
     76e:	82 e0       	ldi	r24, 0x02	; 2
     770:	00 df       	rcall	.-512    	; 0x572 <ADC_Conversion>
     772:	08 2f       	mov	r16, r24
     774:	10 e0       	ldi	r17, 0x00	; 0
	if(left_sensor<x && centre_sensor>y && right_sensor<x)
     776:	20 91 06 02 	lds	r18, 0x0206
     77a:	30 91 07 02 	lds	r19, 0x0207
     77e:	c2 17       	cp	r28, r18
     780:	d3 07       	cpc	r29, r19
     782:	38 f5       	brcc	.+78     	; 0x7d2 <natural_behav+0x80>
     784:	80 91 04 02 	lds	r24, 0x0204
     788:	90 91 05 02 	lds	r25, 0x0205
     78c:	80 17       	cp	r24, r16
     78e:	91 07       	cpc	r25, r17
     790:	80 f4       	brcc	.+32     	; 0x7b2 <natural_behav+0x60>
     792:	e2 16       	cp	r14, r18
     794:	f3 06       	cpc	r15, r19
     796:	68 f4       	brcc	.+26     	; 0x7b2 <natural_behav+0x60>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     798:	86 e9       	ldi	r24, 0x96	; 150
     79a:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     79e:	80 93 2a 01 	sts	0x012A, r24
	{
		velocity(150,150);
		forward();
     7a2:	47 df       	rcall	.-370    	; 0x632 <forward>
	}
	if(left_sensor<x && centre_sensor<y && right_sensor>x)
     7a4:	20 91 06 02 	lds	r18, 0x0206
     7a8:	30 91 07 02 	lds	r19, 0x0207
     7ac:	c2 17       	cp	r28, r18
     7ae:	d3 07       	cpc	r29, r19
     7b0:	80 f4       	brcc	.+32     	; 0x7d2 <natural_behav+0x80>
     7b2:	80 91 04 02 	lds	r24, 0x0204
     7b6:	90 91 05 02 	lds	r25, 0x0205
     7ba:	08 17       	cp	r16, r24
     7bc:	19 07       	cpc	r17, r25
     7be:	48 f4       	brcc	.+18     	; 0x7d2 <natural_behav+0x80>
     7c0:	2e 15       	cp	r18, r14
     7c2:	3f 05       	cpc	r19, r15
     7c4:	30 f4       	brcc	.+12     	; 0x7d2 <natural_behav+0x80>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     7c6:	84 e6       	ldi	r24, 0x64	; 100
     7c8:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     7cc:	80 93 2a 01 	sts	0x012A, r24
	{
		velocity(100,100);
		right();
     7d0:	39 df       	rcall	.-398    	; 0x644 <right>
	}
	if(left_sensor>x && centre_sensor<y && right_sensor<x)
     7d2:	20 91 06 02 	lds	r18, 0x0206
     7d6:	30 91 07 02 	lds	r19, 0x0207
     7da:	2c 17       	cp	r18, r28
     7dc:	3d 07       	cpc	r19, r29
     7de:	80 f4       	brcc	.+32     	; 0x800 <natural_behav+0xae>
     7e0:	80 91 04 02 	lds	r24, 0x0204
     7e4:	90 91 05 02 	lds	r25, 0x0205
     7e8:	08 17       	cp	r16, r24
     7ea:	19 07       	cpc	r17, r25
     7ec:	48 f4       	brcc	.+18     	; 0x800 <natural_behav+0xae>
     7ee:	e2 16       	cp	r14, r18
     7f0:	f3 06       	cpc	r15, r19
     7f2:	30 f4       	brcc	.+12     	; 0x800 <natural_behav+0xae>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     7f4:	84 e6       	ldi	r24, 0x64	; 100
     7f6:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     7fa:	80 93 2a 01 	sts	0x012A, r24
	{
		velocity(100,100);
		left();
     7fe:	1f df       	rcall	.-450    	; 0x63e <left>
	}
}
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	ff 90       	pop	r15
     80a:	ef 90       	pop	r14
     80c:	08 95       	ret

0000080e <back_behav>:

//this function is used for aligning the bot on the black line while moving backward
void back_behav(void)
{
     80e:	ef 92       	push	r14
     810:	ff 92       	push	r15
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
	unsigned int left_sensor=ADC_Conversion(1);
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	aa de       	rcall	.-684    	; 0x572 <ADC_Conversion>
     81e:	c8 2f       	mov	r28, r24
     820:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned int right_sensor=ADC_Conversion(3);
     822:	83 e0       	ldi	r24, 0x03	; 3
     824:	a6 de       	rcall	.-692    	; 0x572 <ADC_Conversion>
     826:	e8 2e       	mov	r14, r24
     828:	f1 2c       	mov	r15, r1
	unsigned int centre_sensor=ADC_Conversion(2);
     82a:	82 e0       	ldi	r24, 0x02	; 2
     82c:	a2 de       	rcall	.-700    	; 0x572 <ADC_Conversion>
     82e:	08 2f       	mov	r16, r24
     830:	10 e0       	ldi	r17, 0x00	; 0
	
	if(left_sensor<x && centre_sensor>y && right_sensor<x)
     832:	20 91 06 02 	lds	r18, 0x0206
     836:	30 91 07 02 	lds	r19, 0x0207
     83a:	c2 17       	cp	r28, r18
     83c:	d3 07       	cpc	r29, r19
     83e:	38 f5       	brcc	.+78     	; 0x88e <back_behav+0x80>
     840:	80 91 04 02 	lds	r24, 0x0204
     844:	90 91 05 02 	lds	r25, 0x0205
     848:	80 17       	cp	r24, r16
     84a:	91 07       	cpc	r25, r17
     84c:	80 f4       	brcc	.+32     	; 0x86e <back_behav+0x60>
     84e:	e2 16       	cp	r14, r18
     850:	f3 06       	cpc	r15, r19
     852:	68 f4       	brcc	.+26     	; 0x86e <back_behav+0x60>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     854:	86 e9       	ldi	r24, 0x96	; 150
     856:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     85a:	80 93 2a 01 	sts	0x012A, r24
	{
		velocity(150,150);
		back();
     85e:	f5 de       	rcall	.-534    	; 0x64a <back>
	}
	if(left_sensor<x && centre_sensor<y && right_sensor>x)
     860:	20 91 06 02 	lds	r18, 0x0206
     864:	30 91 07 02 	lds	r19, 0x0207
     868:	c2 17       	cp	r28, r18
     86a:	d3 07       	cpc	r29, r19
     86c:	80 f4       	brcc	.+32     	; 0x88e <back_behav+0x80>
     86e:	80 91 04 02 	lds	r24, 0x0204
     872:	90 91 05 02 	lds	r25, 0x0205
     876:	08 17       	cp	r16, r24
     878:	19 07       	cpc	r17, r25
     87a:	48 f4       	brcc	.+18     	; 0x88e <back_behav+0x80>
     87c:	2e 15       	cp	r18, r14
     87e:	3f 05       	cpc	r19, r15
     880:	30 f4       	brcc	.+12     	; 0x88e <back_behav+0x80>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     882:	84 e6       	ldi	r24, 0x64	; 100
     884:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     888:	80 93 2a 01 	sts	0x012A, r24
	{
		velocity(100,100);
		right();
     88c:	db de       	rcall	.-586    	; 0x644 <right>
	}
	if(left_sensor>x && centre_sensor<y && right_sensor<x)
     88e:	20 91 06 02 	lds	r18, 0x0206
     892:	30 91 07 02 	lds	r19, 0x0207
     896:	2c 17       	cp	r18, r28
     898:	3d 07       	cpc	r19, r29
     89a:	80 f4       	brcc	.+32     	; 0x8bc <back_behav+0xae>
     89c:	80 91 04 02 	lds	r24, 0x0204
     8a0:	90 91 05 02 	lds	r25, 0x0205
     8a4:	08 17       	cp	r16, r24
     8a6:	19 07       	cpc	r17, r25
     8a8:	48 f4       	brcc	.+18     	; 0x8bc <back_behav+0xae>
     8aa:	e2 16       	cp	r14, r18
     8ac:	f3 06       	cpc	r15, r19
     8ae:	30 f4       	brcc	.+12     	; 0x8bc <back_behav+0xae>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     8b0:	84 e6       	ldi	r24, 0x64	; 100
     8b2:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     8b6:	80 93 2a 01 	sts	0x012A, r24
	{
		velocity(100,100);
		left();
     8ba:	c1 de       	rcall	.-638    	; 0x63e <left>
	}

}
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	ff 90       	pop	r15
     8c6:	ef 90       	pop	r14
     8c8:	08 95       	ret

000008ca <main>:
unsigned char prox_value1=0,prox_value2=0;
unsigned int prox=500,prox2=0;

int main(void)

{
     8ca:	5f 92       	push	r5
     8cc:	6f 92       	push	r6
     8ce:	7f 92       	push	r7
     8d0:	8f 92       	push	r8
     8d2:	9f 92       	push	r9
     8d4:	af 92       	push	r10
     8d6:	bf 92       	push	r11
     8d8:	cf 92       	push	r12
     8da:	df 92       	push	r13
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
	
	init_devices();
     8e8:	dd de       	rcall	.-582    	; 0x6a4 <init_devices>
	binit_devices();
     8ea:	24 de       	rcall	.-952    	; 0x534 <binit_devices>
	lcd_set_4bit();
     8ec:	5d dc       	rcall	.-1862   	; 0x1a8 <lcd_set_4bit>
	sinit_devices();
     8ee:	04 df       	rcall	.-504    	; 0x6f8 <sinit_devices>
	
	lcd_cursor(1,3);
     8f0:	63 e0       	ldi	r22, 0x03	; 3
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	09 dd       	rcall	.-1518   	; 0x308 <lcd_cursor>
	lcd_string("DIDI");
     8f6:	88 e0       	ldi	r24, 0x08	; 8
     8f8:	92 e0       	ldi	r25, 0x02	; 2
     8fa:	f8 dc       	rcall	.-1552   	; 0x2ec <lcd_string>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     8fc:	08 e2       	ldi	r16, 0x28	; 40
     8fe:	11 e0       	ldi	r17, 0x01	; 1
     900:	0f 2e       	mov	r0, r31
     902:	f6 e9       	ldi	r31, 0x96	; 150
     904:	ff 2e       	mov	r15, r31
     906:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
     908:	ca e2       	ldi	r28, 0x2A	; 42
     90a:	d1 e0       	ldi	r29, 0x01	; 1
	

	
	while(n==1)
     90c:	44 c0       	rjmp	.+136    	; 0x996 <main+0xcc>
	{
		unsigned int left_sensor=ADC_Conversion(1);			//value from left sensor
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	30 de       	rcall	.-928    	; 0x572 <ADC_Conversion>
     912:	e8 2e       	mov	r14, r24
		unsigned int right_sensor=ADC_Conversion(3);		//value from right sensor
     914:	83 e0       	ldi	r24, 0x03	; 3
     916:	2d de       	rcall	.-934    	; 0x572 <ADC_Conversion>
     918:	c8 2e       	mov	r12, r24
		unsigned int centre_sensor=ADC_Conversion(2);		//value from centre sensor
     91a:	82 e0       	ldi	r24, 0x02	; 2
     91c:	2a de       	rcall	.-940    	; 0x572 <ADC_Conversion>
     91e:	d8 2e       	mov	r13, r24
		
		natural_behav();
     920:	18 df       	rcall	.-464    	; 0x752 <natural_behav>
		
		if(left_sensor > x && centre_sensor > y && right_sensor > x)		//node condition
     922:	20 91 06 02 	lds	r18, 0x0206
     926:	30 91 07 02 	lds	r19, 0x0207
	

	
	while(n==1)
	{
		unsigned int left_sensor=ADC_Conversion(1);			//value from left sensor
     92a:	4e 2d       	mov	r20, r14
     92c:	50 e0       	ldi	r21, 0x00	; 0
		unsigned int right_sensor=ADC_Conversion(3);		//value from right sensor
		unsigned int centre_sensor=ADC_Conversion(2);		//value from centre sensor
		
		natural_behav();
		
		if(left_sensor > x && centre_sensor > y && right_sensor > x)		//node condition
     92e:	24 17       	cp	r18, r20
     930:	35 07       	cpc	r19, r21
     932:	88 f5       	brcc	.+98     	; 0x996 <main+0xcc>
	
	while(n==1)
	{
		unsigned int left_sensor=ADC_Conversion(1);			//value from left sensor
		unsigned int right_sensor=ADC_Conversion(3);		//value from right sensor
		unsigned int centre_sensor=ADC_Conversion(2);		//value from centre sensor
     934:	6d 2d       	mov	r22, r13
     936:	70 e0       	ldi	r23, 0x00	; 0
		
		natural_behav();
		
		if(left_sensor > x && centre_sensor > y && right_sensor > x)		//node condition
     938:	40 91 04 02 	lds	r20, 0x0204
     93c:	50 91 05 02 	lds	r21, 0x0205
     940:	46 17       	cp	r20, r22
     942:	57 07       	cpc	r21, r23
     944:	40 f5       	brcc	.+80     	; 0x996 <main+0xcc>

	
	while(n==1)
	{
		unsigned int left_sensor=ADC_Conversion(1);			//value from left sensor
		unsigned int right_sensor=ADC_Conversion(3);		//value from right sensor
     946:	8c 2d       	mov	r24, r12
     948:	90 e0       	ldi	r25, 0x00	; 0
		unsigned int centre_sensor=ADC_Conversion(2);		//value from centre sensor
		
		natural_behav();
		
		if(left_sensor > x && centre_sensor > y && right_sensor > x)		//node condition
     94a:	28 17       	cp	r18, r24
     94c:	39 07       	cpc	r19, r25
     94e:	18 f5       	brcc	.+70     	; 0x996 <main+0xcc>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     950:	f8 01       	movw	r30, r16
     952:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
     954:	f8 82       	st	Y, r15
		{
			velocity(150,150);
			forward();
     956:	6d de       	rcall	.-806    	; 0x632 <forward>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     958:	ff ef       	ldi	r31, 0xFF	; 255
     95a:	2f eb       	ldi	r18, 0xBF	; 191
     95c:	3f e0       	ldi	r19, 0x0F	; 15
     95e:	f1 50       	subi	r31, 0x01	; 1
     960:	20 40       	sbci	r18, 0x00	; 0
     962:	30 40       	sbci	r19, 0x00	; 0
     964:	e1 f7       	brne	.-8      	; 0x95e <main+0x94>
     966:	00 c0       	rjmp	.+0      	; 0x968 <main+0x9e>
     968:	00 00       	nop
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     96a:	f8 01       	movw	r30, r16
     96c:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
     96e:	f8 82       	st	Y, r15
			_delay_ms(350);
			
			velocity(150,150);
			right();
     970:	69 de       	rcall	.-814    	; 0x644 <right>
     972:	ff ef       	ldi	r31, 0xFF	; 255
     974:	2f e3       	ldi	r18, 0x3F	; 63
     976:	36 e2       	ldi	r19, 0x26	; 38
     978:	f1 50       	subi	r31, 0x01	; 1
     97a:	20 40       	sbci	r18, 0x00	; 0
     97c:	30 40       	sbci	r19, 0x00	; 0
     97e:	e1 f7       	brne	.-8      	; 0x978 <main+0xae>
     980:	00 c0       	rjmp	.+0      	; 0x982 <main+0xb8>
     982:	00 00       	nop
			_delay_ms(850);
			n++;
     984:	80 91 02 02 	lds	r24, 0x0202
     988:	90 91 03 02 	lds	r25, 0x0203
     98c:	01 96       	adiw	r24, 0x01	; 1
     98e:	90 93 03 02 	sts	0x0203, r25
     992:	80 93 02 02 	sts	0x0202, r24
	lcd_cursor(1,3);
	lcd_string("DIDI");
	

	
	while(n==1)
     996:	80 91 02 02 	lds	r24, 0x0202
     99a:	90 91 03 02 	lds	r25, 0x0203
     99e:	01 97       	sbiw	r24, 0x01	; 1
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <main+0xda>
     9a2:	b5 cf       	rjmp	.-150    	; 0x90e <main+0x44>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     9a4:	08 e2       	ldi	r16, 0x28	; 40
     9a6:	11 e0       	ldi	r17, 0x01	; 1
     9a8:	0f 2e       	mov	r0, r31
     9aa:	f6 e9       	ldi	r31, 0x96	; 150
     9ac:	df 2e       	mov	r13, r31
     9ae:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
     9b0:	ca e2       	ldi	r28, 0x2A	; 42
     9b2:	d1 e0       	ldi	r29, 0x01	; 1
     9b4:	43 c0       	rjmp	.+134    	; 0xa3c <main+0x172>
		}
	}
	
	while(n==2)
	{
		unsigned int left_sensor=ADC_Conversion(1);
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	dc dd       	rcall	.-1096   	; 0x572 <ADC_Conversion>
     9ba:	c8 2e       	mov	r12, r24
		unsigned int right_sensor=ADC_Conversion(3);
     9bc:	83 e0       	ldi	r24, 0x03	; 3
     9be:	d9 dd       	rcall	.-1102   	; 0x572 <ADC_Conversion>
     9c0:	b8 2e       	mov	r11, r24
		unsigned int centre_sensor=ADC_Conversion(2);
     9c2:	82 e0       	ldi	r24, 0x02	; 2
     9c4:	d6 dd       	rcall	.-1108   	; 0x572 <ADC_Conversion>
     9c6:	e8 2e       	mov	r14, r24
     9c8:	f1 2c       	mov	r15, r1
		
		natural_behav();
     9ca:	c3 de       	rcall	.-634    	; 0x752 <natural_behav>
		
		if((left_sensor > x && centre_sensor > y && right_sensor > x) || (left_sensor < x && centre_sensor > y && right_sensor > x))
     9cc:	20 91 06 02 	lds	r18, 0x0206
     9d0:	30 91 07 02 	lds	r19, 0x0207
		}
	}
	
	while(n==2)
	{
		unsigned int left_sensor=ADC_Conversion(1);
     9d4:	4c 2d       	mov	r20, r12
     9d6:	50 e0       	ldi	r21, 0x00	; 0
		unsigned int right_sensor=ADC_Conversion(3);
		unsigned int centre_sensor=ADC_Conversion(2);
		
		natural_behav();
		
		if((left_sensor > x && centre_sensor > y && right_sensor > x) || (left_sensor < x && centre_sensor > y && right_sensor > x))
     9d8:	42 17       	cp	r20, r18
     9da:	53 07       	cpc	r21, r19
     9dc:	79 f1       	breq	.+94     	; 0xa3c <main+0x172>
     9de:	40 91 04 02 	lds	r20, 0x0204
     9e2:	50 91 05 02 	lds	r21, 0x0205
     9e6:	4e 15       	cp	r20, r14
     9e8:	5f 05       	cpc	r21, r15
     9ea:	40 f5       	brcc	.+80     	; 0xa3c <main+0x172>
	}
	
	while(n==2)
	{
		unsigned int left_sensor=ADC_Conversion(1);
		unsigned int right_sensor=ADC_Conversion(3);
     9ec:	8b 2d       	mov	r24, r11
     9ee:	90 e0       	ldi	r25, 0x00	; 0
		unsigned int centre_sensor=ADC_Conversion(2);
		
		natural_behav();
		
		if((left_sensor > x && centre_sensor > y && right_sensor > x) || (left_sensor < x && centre_sensor > y && right_sensor > x))
     9f0:	28 17       	cp	r18, r24
     9f2:	39 07       	cpc	r19, r25
     9f4:	18 f5       	brcc	.+70     	; 0xa3c <main+0x172>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     9f6:	f8 01       	movw	r30, r16
     9f8:	d0 82       	st	Z, r13
	OCR5BL = (unsigned char)right_motor;
     9fa:	d8 82       	st	Y, r13
		{
			velocity(150,150);
			forward();
     9fc:	1a de       	rcall	.-972    	; 0x632 <forward>
     9fe:	ff ef       	ldi	r31, 0xFF	; 255
     a00:	2f eb       	ldi	r18, 0xBF	; 191
     a02:	3f e0       	ldi	r19, 0x0F	; 15
     a04:	f1 50       	subi	r31, 0x01	; 1
     a06:	20 40       	sbci	r18, 0x00	; 0
     a08:	30 40       	sbci	r19, 0x00	; 0
     a0a:	e1 f7       	brne	.-8      	; 0xa04 <main+0x13a>
     a0c:	00 c0       	rjmp	.+0      	; 0xa0e <main+0x144>
     a0e:	00 00       	nop
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     a10:	f8 01       	movw	r30, r16
     a12:	d0 82       	st	Z, r13
	OCR5BL = (unsigned char)right_motor;
     a14:	d8 82       	st	Y, r13
			_delay_ms(350);
			
			velocity(150,150);
			right();
     a16:	16 de       	rcall	.-980    	; 0x644 <right>
     a18:	ff ef       	ldi	r31, 0xFF	; 255
     a1a:	2f e3       	ldi	r18, 0x3F	; 63
     a1c:	36 e2       	ldi	r19, 0x26	; 38
     a1e:	f1 50       	subi	r31, 0x01	; 1
     a20:	20 40       	sbci	r18, 0x00	; 0
     a22:	30 40       	sbci	r19, 0x00	; 0
     a24:	e1 f7       	brne	.-8      	; 0xa1e <main+0x154>
     a26:	00 c0       	rjmp	.+0      	; 0xa28 <main+0x15e>
     a28:	00 00       	nop
			_delay_ms(850);
			
			n++;
     a2a:	80 91 02 02 	lds	r24, 0x0202
     a2e:	90 91 03 02 	lds	r25, 0x0203
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	90 93 03 02 	sts	0x0203, r25
     a38:	80 93 02 02 	sts	0x0202, r24
			_delay_ms(850);
			n++;
		}
	}
	
	while(n==2)
     a3c:	80 91 02 02 	lds	r24, 0x0202
     a40:	90 91 03 02 	lds	r25, 0x0203
     a44:	02 97       	sbiw	r24, 0x02	; 2
     a46:	09 f4       	brne	.+2      	; 0xa4a <main+0x180>
     a48:	b6 cf       	rjmp	.-148    	; 0x9b6 <main+0xec>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     a4a:	08 e2       	ldi	r16, 0x28	; 40
     a4c:	11 e0       	ldi	r17, 0x01	; 1
     a4e:	0f 2e       	mov	r0, r31
     a50:	f6 e9       	ldi	r31, 0x96	; 150
     a52:	ff 2e       	mov	r15, r31
     a54:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
     a56:	ca e2       	ldi	r28, 0x2A	; 42
     a58:	d1 e0       	ldi	r29, 0x01	; 1
     a5a:	41 c0       	rjmp	.+130    	; 0xade <main+0x214>
		
	}
	
		while(n==3)
		{
			unsigned int left_sensor=ADC_Conversion(1);
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	89 dd       	rcall	.-1262   	; 0x572 <ADC_Conversion>
     a60:	e8 2e       	mov	r14, r24
			unsigned int right_sensor=ADC_Conversion(3);
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	86 dd       	rcall	.-1268   	; 0x572 <ADC_Conversion>
     a66:	c8 2e       	mov	r12, r24
			unsigned int centre_sensor=ADC_Conversion(2);
     a68:	82 e0       	ldi	r24, 0x02	; 2
     a6a:	83 dd       	rcall	.-1274   	; 0x572 <ADC_Conversion>
     a6c:	d8 2e       	mov	r13, r24
			
			natural_behav();
     a6e:	71 de       	rcall	.-798    	; 0x752 <natural_behav>
			
			if(left_sensor > x && centre_sensor > y && right_sensor > x)
     a70:	20 91 06 02 	lds	r18, 0x0206
     a74:	30 91 07 02 	lds	r19, 0x0207
		
	}
	
		while(n==3)
		{
			unsigned int left_sensor=ADC_Conversion(1);
     a78:	4e 2d       	mov	r20, r14
     a7a:	50 e0       	ldi	r21, 0x00	; 0
			unsigned int right_sensor=ADC_Conversion(3);
			unsigned int centre_sensor=ADC_Conversion(2);
			
			natural_behav();
			
			if(left_sensor > x && centre_sensor > y && right_sensor > x)
     a7c:	24 17       	cp	r18, r20
     a7e:	35 07       	cpc	r19, r21
     a80:	70 f5       	brcc	.+92     	; 0xade <main+0x214>
	
		while(n==3)
		{
			unsigned int left_sensor=ADC_Conversion(1);
			unsigned int right_sensor=ADC_Conversion(3);
			unsigned int centre_sensor=ADC_Conversion(2);
     a82:	6d 2d       	mov	r22, r13
     a84:	70 e0       	ldi	r23, 0x00	; 0
			
			natural_behav();
			
			if(left_sensor > x && centre_sensor > y && right_sensor > x)
     a86:	40 91 04 02 	lds	r20, 0x0204
     a8a:	50 91 05 02 	lds	r21, 0x0205
     a8e:	46 17       	cp	r20, r22
     a90:	57 07       	cpc	r21, r23
     a92:	28 f5       	brcc	.+74     	; 0xade <main+0x214>
	}
	
		while(n==3)
		{
			unsigned int left_sensor=ADC_Conversion(1);
			unsigned int right_sensor=ADC_Conversion(3);
     a94:	8c 2d       	mov	r24, r12
     a96:	90 e0       	ldi	r25, 0x00	; 0
			unsigned int centre_sensor=ADC_Conversion(2);
			
			natural_behav();
			
			if(left_sensor > x && centre_sensor > y && right_sensor > x)
     a98:	28 17       	cp	r18, r24
     a9a:	39 07       	cpc	r19, r25
     a9c:	00 f5       	brcc	.+64     	; 0xade <main+0x214>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     a9e:	f8 01       	movw	r30, r16
     aa0:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
     aa2:	f8 82       	st	Y, r15
			{
				velocity(150,150);
				forward();
     aa4:	c6 dd       	rcall	.-1140   	; 0x632 <forward>
     aa6:	ff ef       	ldi	r31, 0xFF	; 255
     aa8:	2f eb       	ldi	r18, 0xBF	; 191
     aaa:	3f e0       	ldi	r19, 0x0F	; 15
     aac:	f1 50       	subi	r31, 0x01	; 1
     aae:	20 40       	sbci	r18, 0x00	; 0
     ab0:	30 40       	sbci	r19, 0x00	; 0
     ab2:	e1 f7       	brne	.-8      	; 0xaac <main+0x1e2>
     ab4:	00 c0       	rjmp	.+0      	; 0xab6 <main+0x1ec>
     ab6:	00 00       	nop
				_delay_ms(350);
				right();
     ab8:	c5 dd       	rcall	.-1142   	; 0x644 <right>
     aba:	4f ef       	ldi	r20, 0xFF	; 255
     abc:	8f ef       	ldi	r24, 0xFF	; 255
     abe:	93 e2       	ldi	r25, 0x23	; 35
     ac0:	41 50       	subi	r20, 0x01	; 1
     ac2:	80 40       	sbci	r24, 0x00	; 0
     ac4:	90 40       	sbci	r25, 0x00	; 0
     ac6:	e1 f7       	brne	.-8      	; 0xac0 <main+0x1f6>
     ac8:	00 c0       	rjmp	.+0      	; 0xaca <main+0x200>
     aca:	00 00       	nop
				_delay_ms(800);
				n++;
     acc:	80 91 02 02 	lds	r24, 0x0202
     ad0:	90 91 03 02 	lds	r25, 0x0203
     ad4:	01 96       	adiw	r24, 0x01	; 1
     ad6:	90 93 03 02 	sts	0x0203, r25
     ada:	80 93 02 02 	sts	0x0202, r24
			n++;
		}
		
	}
	
		while(n==3)
     ade:	80 91 02 02 	lds	r24, 0x0202
     ae2:	90 91 03 02 	lds	r25, 0x0203
     ae6:	03 97       	sbiw	r24, 0x03	; 3
     ae8:	09 f4       	brne	.+2      	; 0xaec <main+0x222>
     aea:	b8 cf       	rjmp	.-144    	; 0xa5c <main+0x192>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     aec:	0f 2e       	mov	r0, r31
     aee:	f8 e2       	ldi	r31, 0x28	; 40
     af0:	af 2e       	mov	r10, r31
     af2:	bb 24       	eor	r11, r11
     af4:	b3 94       	inc	r11
     af6:	f0 2d       	mov	r31, r0
     af8:	0f 2e       	mov	r0, r31
     afa:	fa e5       	ldi	r31, 0x5A	; 90
     afc:	9f 2e       	mov	r9, r31
     afe:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
     b00:	0f 2e       	mov	r0, r31
     b02:	fa e2       	ldi	r31, 0x2A	; 42
     b04:	cf 2e       	mov	r12, r31
     b06:	dd 24       	eor	r13, r13
     b08:	d3 94       	inc	r13
     b0a:	f0 2d       	mov	r31, r0
     b0c:	a8 c0       	rjmp	.+336    	; 0xc5e <main+0x394>
			}
			
		}
		while(n==4)		//for pick up of construction material
		{
			unsigned int left_sensor=ADC_Conversion(1);
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	30 dd       	rcall	.-1440   	; 0x572 <ADC_Conversion>
     b12:	c8 2f       	mov	r28, r24
     b14:	d0 e0       	ldi	r29, 0x00	; 0
			unsigned int right_sensor=ADC_Conversion(3);
     b16:	83 e0       	ldi	r24, 0x03	; 3
     b18:	2c dd       	rcall	.-1448   	; 0x572 <ADC_Conversion>
     b1a:	e8 2e       	mov	r14, r24
     b1c:	f1 2c       	mov	r15, r1
			unsigned int centre_sensor=ADC_Conversion(2);
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	28 dd       	rcall	.-1456   	; 0x572 <ADC_Conversion>
     b22:	08 2f       	mov	r16, r24
     b24:	10 e0       	ldi	r17, 0x00	; 0
			if(left_sensor<x && centre_sensor <y && right_sensor>x)
     b26:	80 91 06 02 	lds	r24, 0x0206
     b2a:	90 91 07 02 	lds	r25, 0x0207
     b2e:	c8 17       	cp	r28, r24
     b30:	d9 07       	cpc	r29, r25
     b32:	78 f4       	brcc	.+30     	; 0xb52 <main+0x288>
     b34:	20 91 04 02 	lds	r18, 0x0204
     b38:	30 91 05 02 	lds	r19, 0x0205
     b3c:	02 17       	cp	r16, r18
     b3e:	13 07       	cpc	r17, r19
     b40:	40 f4       	brcc	.+16     	; 0xb52 <main+0x288>
     b42:	8e 15       	cp	r24, r14
     b44:	9f 05       	cpc	r25, r15
     b46:	28 f4       	brcc	.+10     	; 0xb52 <main+0x288>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     b48:	f5 01       	movw	r30, r10
     b4a:	90 82       	st	Z, r9
	OCR5BL = (unsigned char)right_motor;
     b4c:	f6 01       	movw	r30, r12
     b4e:	90 82       	st	Z, r9
			{
				velocity(90,90);
				right();
     b50:	79 dd       	rcall	.-1294   	; 0x644 <right>
			}
			if(left_sensor>x && centre_sensor <y && right_sensor<x)
     b52:	80 91 06 02 	lds	r24, 0x0206
     b56:	90 91 07 02 	lds	r25, 0x0207
     b5a:	8c 17       	cp	r24, r28
     b5c:	9d 07       	cpc	r25, r29
     b5e:	78 f4       	brcc	.+30     	; 0xb7e <main+0x2b4>
     b60:	20 91 04 02 	lds	r18, 0x0204
     b64:	30 91 05 02 	lds	r19, 0x0205
     b68:	02 17       	cp	r16, r18
     b6a:	13 07       	cpc	r17, r19
     b6c:	40 f4       	brcc	.+16     	; 0xb7e <main+0x2b4>
     b6e:	e8 16       	cp	r14, r24
     b70:	f9 06       	cpc	r15, r25
     b72:	28 f4       	brcc	.+10     	; 0xb7e <main+0x2b4>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     b74:	f5 01       	movw	r30, r10
     b76:	90 82       	st	Z, r9
	OCR5BL = (unsigned char)right_motor;
     b78:	f6 01       	movw	r30, r12
     b7a:	90 82       	st	Z, r9
			{	
				velocity(90,90);
				left();
     b7c:	60 dd       	rcall	.-1344   	; 0x63e <left>
			}
			if(left_sensor<x && centre_sensor>y && right_sensor<x)
     b7e:	20 91 06 02 	lds	r18, 0x0206
     b82:	30 91 07 02 	lds	r19, 0x0207
     b86:	c2 17       	cp	r28, r18
     b88:	d3 07       	cpc	r29, r19
     b8a:	08 f0       	brcs	.+2      	; 0xb8e <main+0x2c4>
     b8c:	68 c0       	rjmp	.+208    	; 0xc5e <main+0x394>
     b8e:	80 91 04 02 	lds	r24, 0x0204
     b92:	90 91 05 02 	lds	r25, 0x0205
     b96:	80 17       	cp	r24, r16
     b98:	91 07       	cpc	r25, r17
     b9a:	08 f0       	brcs	.+2      	; 0xb9e <main+0x2d4>
     b9c:	60 c0       	rjmp	.+192    	; 0xc5e <main+0x394>
     b9e:	e2 16       	cp	r14, r18
     ba0:	f3 06       	cpc	r15, r19
     ba2:	08 f0       	brcs	.+2      	; 0xba6 <main+0x2dc>
     ba4:	5c c0       	rjmp	.+184    	; 0xc5e <main+0x394>
			{
				prox_value1 = ADC_Conversion(9);
     ba6:	89 e0       	ldi	r24, 0x09	; 9
     ba8:	e4 dc       	rcall	.-1592   	; 0x572 <ADC_Conversion>
     baa:	80 93 11 02 	sts	0x0211, r24
				prox = Sharp_GP2D12_estimation(prox_value1);		//taking values from proximity sensor1 placed at the front of the bot
     bae:	fc dc       	rcall	.-1544   	; 0x5a8 <Sharp_GP2D12_estimation>
     bb0:	90 93 01 02 	sts	0x0201, r25
     bb4:	80 93 00 02 	sts	0x0200, r24
				lcd_print(2,14,prox,3);
     bb8:	23 e0       	ldi	r18, 0x03	; 3
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	ac 01       	movw	r20, r24
     bbe:	6e e0       	ldi	r22, 0x0E	; 14
     bc0:	82 e0       	ldi	r24, 0x02	; 2
     bc2:	bd db       	rcall	.-2182   	; 0x33e <lcd_print>
				
				if(prox > 100)
     bc4:	80 91 00 02 	lds	r24, 0x0200
     bc8:	90 91 01 02 	lds	r25, 0x0201
     bcc:	85 36       	cpi	r24, 0x65	; 101
     bce:	91 05       	cpc	r25, r1
     bd0:	30 f0       	brcs	.+12     	; 0xbde <main+0x314>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     bd2:	f5 01       	movw	r30, r10
     bd4:	90 82       	st	Z, r9
	OCR5BL = (unsigned char)right_motor;
     bd6:	f6 01       	movw	r30, r12
     bd8:	90 82       	st	Z, r9
				{	velocity(90,90);
					forward();
     bda:	2b dd       	rcall	.-1450   	; 0x632 <forward>
     bdc:	40 c0       	rjmp	.+128    	; 0xc5e <main+0x394>
				}
				
				else if(prox > 90 && prox < 99)
     bde:	9c 01       	movw	r18, r24
     be0:	2b 55       	subi	r18, 0x5B	; 91
     be2:	31 09       	sbc	r19, r1
     be4:	28 30       	cpi	r18, 0x08	; 8
     be6:	31 05       	cpc	r19, r1
     be8:	90 f5       	brcc	.+100    	; 0xc4e <main+0x384>
				{
					stop();
     bea:	26 dd       	rcall	.-1460   	; 0x638 <stop>
     bec:	ff ef       	ldi	r31, 0xFF	; 255
     bee:	2f ef       	ldi	r18, 0xFF	; 255
     bf0:	3c e2       	ldi	r19, 0x2C	; 44
     bf2:	f1 50       	subi	r31, 0x01	; 1
     bf4:	20 40       	sbci	r18, 0x00	; 0
     bf6:	30 40       	sbci	r19, 0x00	; 0
     bf8:	e1 f7       	brne	.-8      	; 0xbf2 <main+0x328>
     bfa:	00 c0       	rjmp	.+0      	; 0xbfc <main+0x332>
     bfc:	00 00       	nop
					_delay_ms(1000);
					
					down_pick_up();
     bfe:	81 dd       	rcall	.-1278   	; 0x702 <down_pick_up>
     c00:	4f ef       	ldi	r20, 0xFF	; 255
     c02:	8f ef       	ldi	r24, 0xFF	; 255
     c04:	9c e2       	ldi	r25, 0x2C	; 44
     c06:	41 50       	subi	r20, 0x01	; 1
     c08:	80 40       	sbci	r24, 0x00	; 0
     c0a:	90 40       	sbci	r25, 0x00	; 0
     c0c:	e1 f7       	brne	.-8      	; 0xc06 <main+0x33c>
     c0e:	00 c0       	rjmp	.+0      	; 0xc10 <main+0x346>
     c10:	00 00       	nop
					_delay_ms(1000);
					
					stop();
     c12:	12 dd       	rcall	.-1500   	; 0x638 <stop>
     c14:	ef ef       	ldi	r30, 0xFF	; 255
     c16:	ff ef       	ldi	r31, 0xFF	; 255
     c18:	2c e2       	ldi	r18, 0x2C	; 44
     c1a:	e1 50       	subi	r30, 0x01	; 1
     c1c:	f0 40       	sbci	r31, 0x00	; 0
     c1e:	20 40       	sbci	r18, 0x00	; 0
     c20:	e1 f7       	brne	.-8      	; 0xc1a <main+0x350>
     c22:	00 c0       	rjmp	.+0      	; 0xc24 <main+0x35a>
     c24:	00 00       	nop
					_delay_ms(1000);
					
					back();
     c26:	11 dd       	rcall	.-1502   	; 0x64a <back>
     c28:	3f ef       	ldi	r19, 0xFF	; 255
     c2a:	4f e3       	ldi	r20, 0x3F	; 63
     c2c:	8b e0       	ldi	r24, 0x0B	; 11
     c2e:	31 50       	subi	r19, 0x01	; 1
     c30:	40 40       	sbci	r20, 0x00	; 0
     c32:	80 40       	sbci	r24, 0x00	; 0
     c34:	e1 f7       	brne	.-8      	; 0xc2e <main+0x364>
     c36:	00 c0       	rjmp	.+0      	; 0xc38 <main+0x36e>
     c38:	00 00       	nop
					_delay_ms(250);
					n++;
     c3a:	80 91 02 02 	lds	r24, 0x0202
     c3e:	90 91 03 02 	lds	r25, 0x0203
     c42:	01 96       	adiw	r24, 0x01	; 1
     c44:	90 93 03 02 	sts	0x0203, r25
     c48:	80 93 02 02 	sts	0x0202, r24
     c4c:	08 c0       	rjmp	.+16     	; 0xc5e <main+0x394>
				}
				else if(prox< 89)
     c4e:	89 35       	cpi	r24, 0x59	; 89
     c50:	91 05       	cpc	r25, r1
     c52:	28 f4       	brcc	.+10     	; 0xc5e <main+0x394>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     c54:	f5 01       	movw	r30, r10
     c56:	90 82       	st	Z, r9
	OCR5BL = (unsigned char)right_motor;
     c58:	f6 01       	movw	r30, r12
     c5a:	90 82       	st	Z, r9
				{	
					velocity(90,90);
					back();
     c5c:	f6 dc       	rcall	.-1556   	; 0x64a <back>
				n++;
				
			}
			
		}
		while(n==4)		//for pick up of construction material
     c5e:	80 91 02 02 	lds	r24, 0x0202
     c62:	90 91 03 02 	lds	r25, 0x0203
     c66:	04 97       	sbiw	r24, 0x04	; 4
     c68:	09 f4       	brne	.+2      	; 0xc6c <main+0x3a2>
     c6a:	51 cf       	rjmp	.-350    	; 0xb0e <main+0x244>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     c6c:	08 e2       	ldi	r16, 0x28	; 40
     c6e:	11 e0       	ldi	r17, 0x01	; 1
     c70:	0f 2e       	mov	r0, r31
     c72:	f6 e9       	ldi	r31, 0x96	; 150
     c74:	ff 2e       	mov	r15, r31
     c76:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
     c78:	ca e2       	ldi	r28, 0x2A	; 42
     c7a:	d1 e0       	ldi	r29, 0x01	; 1
     c7c:	44 c0       	rjmp	.+136    	; 0xd06 <main+0x43c>



	while(n==5)
	{
		unsigned int left_sensor=ADC_Conversion(1);
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	78 dc       	rcall	.-1808   	; 0x572 <ADC_Conversion>
     c82:	e8 2e       	mov	r14, r24
		unsigned int right_sensor=ADC_Conversion(3);
     c84:	83 e0       	ldi	r24, 0x03	; 3
     c86:	75 dc       	rcall	.-1814   	; 0x572 <ADC_Conversion>
     c88:	c8 2e       	mov	r12, r24
		unsigned int centre_sensor=ADC_Conversion(2);
     c8a:	82 e0       	ldi	r24, 0x02	; 2
     c8c:	72 dc       	rcall	.-1820   	; 0x572 <ADC_Conversion>
     c8e:	d8 2e       	mov	r13, r24
		
		back_behav();
     c90:	be dd       	rcall	.-1156   	; 0x80e <back_behav>
		
		if(left_sensor> x && centre_sensor> y && right_sensor> x)
     c92:	20 91 06 02 	lds	r18, 0x0206
     c96:	30 91 07 02 	lds	r19, 0x0207



	while(n==5)
	{
		unsigned int left_sensor=ADC_Conversion(1);
     c9a:	4e 2d       	mov	r20, r14
     c9c:	50 e0       	ldi	r21, 0x00	; 0
		unsigned int right_sensor=ADC_Conversion(3);
		unsigned int centre_sensor=ADC_Conversion(2);
		
		back_behav();
		
		if(left_sensor> x && centre_sensor> y && right_sensor> x)
     c9e:	24 17       	cp	r18, r20
     ca0:	35 07       	cpc	r19, r21
     ca2:	88 f5       	brcc	.+98     	; 0xd06 <main+0x43c>

	while(n==5)
	{
		unsigned int left_sensor=ADC_Conversion(1);
		unsigned int right_sensor=ADC_Conversion(3);
		unsigned int centre_sensor=ADC_Conversion(2);
     ca4:	6d 2d       	mov	r22, r13
     ca6:	70 e0       	ldi	r23, 0x00	; 0
		
		back_behav();
		
		if(left_sensor> x && centre_sensor> y && right_sensor> x)
     ca8:	40 91 04 02 	lds	r20, 0x0204
     cac:	50 91 05 02 	lds	r21, 0x0205
     cb0:	46 17       	cp	r20, r22
     cb2:	57 07       	cpc	r21, r23
     cb4:	40 f5       	brcc	.+80     	; 0xd06 <main+0x43c>


	while(n==5)
	{
		unsigned int left_sensor=ADC_Conversion(1);
		unsigned int right_sensor=ADC_Conversion(3);
     cb6:	8c 2d       	mov	r24, r12
     cb8:	90 e0       	ldi	r25, 0x00	; 0
		unsigned int centre_sensor=ADC_Conversion(2);
		
		back_behav();
		
		if(left_sensor> x && centre_sensor> y && right_sensor> x)
     cba:	28 17       	cp	r18, r24
     cbc:	39 07       	cpc	r19, r25
     cbe:	18 f5       	brcc	.+70     	; 0xd06 <main+0x43c>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     cc0:	f8 01       	movw	r30, r16
     cc2:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
     cc4:	f8 82       	st	Y, r15
		{
			velocity(150,150);
			forward();
     cc6:	b5 dc       	rcall	.-1686   	; 0x632 <forward>
     cc8:	ff ef       	ldi	r31, 0xFF	; 255
     cca:	2f e7       	ldi	r18, 0x7F	; 127
     ccc:	36 e1       	ldi	r19, 0x16	; 22
     cce:	f1 50       	subi	r31, 0x01	; 1
     cd0:	20 40       	sbci	r18, 0x00	; 0
     cd2:	30 40       	sbci	r19, 0x00	; 0
     cd4:	e1 f7       	brne	.-8      	; 0xcce <main+0x404>
     cd6:	00 c0       	rjmp	.+0      	; 0xcd8 <main+0x40e>
     cd8:	00 00       	nop
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     cda:	f8 01       	movw	r30, r16
     cdc:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
     cde:	f8 82       	st	Y, r15
			_delay_ms(500);
			
			velocity(150,150);
			left();
     ce0:	ae dc       	rcall	.-1700   	; 0x63e <left>
     ce2:	ff ef       	ldi	r31, 0xFF	; 255
     ce4:	2f e7       	ldi	r18, 0x7F	; 127
     ce6:	3d e0       	ldi	r19, 0x0D	; 13
     ce8:	f1 50       	subi	r31, 0x01	; 1
     cea:	20 40       	sbci	r18, 0x00	; 0
     cec:	30 40       	sbci	r19, 0x00	; 0
     cee:	e1 f7       	brne	.-8      	; 0xce8 <main+0x41e>
     cf0:	00 c0       	rjmp	.+0      	; 0xcf2 <main+0x428>
     cf2:	00 00       	nop
			_delay_ms(300);
			
			n++;
     cf4:	80 91 02 02 	lds	r24, 0x0202
     cf8:	90 91 03 02 	lds	r25, 0x0203
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	90 93 03 02 	sts	0x0203, r25
     d02:	80 93 02 02 	sts	0x0202, r24
			
		}



	while(n==5)
     d06:	80 91 02 02 	lds	r24, 0x0202
     d0a:	90 91 03 02 	lds	r25, 0x0203
     d0e:	05 97       	sbiw	r24, 0x05	; 5
     d10:	09 f4       	brne	.+2      	; 0xd14 <main+0x44a>
     d12:	b5 cf       	rjmp	.-150    	; 0xc7e <main+0x3b4>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     d14:	08 e2       	ldi	r16, 0x28	; 40
     d16:	11 e0       	ldi	r17, 0x01	; 1
     d18:	0f 2e       	mov	r0, r31
     d1a:	f6 e9       	ldi	r31, 0x96	; 150
     d1c:	ff 2e       	mov	r15, r31
     d1e:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
     d20:	ca e2       	ldi	r28, 0x2A	; 42
     d22:	d1 e0       	ldi	r29, 0x01	; 1
     d24:	37 c0       	rjmp	.+110    	; 0xd94 <main+0x4ca>
		}
	}

	while(n==6)
	{
		unsigned int left_sensor=ADC_Conversion(1);
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	24 dc       	rcall	.-1976   	; 0x572 <ADC_Conversion>
     d2a:	e8 2e       	mov	r14, r24
		unsigned int right_sensor=ADC_Conversion(3);
     d2c:	83 e0       	ldi	r24, 0x03	; 3
     d2e:	21 dc       	rcall	.-1982   	; 0x572 <ADC_Conversion>
     d30:	c8 2e       	mov	r12, r24
		unsigned int centre_sensor=ADC_Conversion(2);
     d32:	82 e0       	ldi	r24, 0x02	; 2
     d34:	1e dc       	rcall	.-1988   	; 0x572 <ADC_Conversion>
     d36:	d8 2e       	mov	r13, r24
		
		natural_behav();
     d38:	0c dd       	rcall	.-1512   	; 0x752 <natural_behav>
		
		if(left_sensor> x && centre_sensor> y && right_sensor> x)
     d3a:	20 91 06 02 	lds	r18, 0x0206
     d3e:	30 91 07 02 	lds	r19, 0x0207
		}
	}

	while(n==6)
	{
		unsigned int left_sensor=ADC_Conversion(1);
     d42:	4e 2d       	mov	r20, r14
     d44:	50 e0       	ldi	r21, 0x00	; 0
		unsigned int right_sensor=ADC_Conversion(3);
		unsigned int centre_sensor=ADC_Conversion(2);
		
		natural_behav();
		
		if(left_sensor> x && centre_sensor> y && right_sensor> x)
     d46:	24 17       	cp	r18, r20
     d48:	35 07       	cpc	r19, r21
     d4a:	20 f5       	brcc	.+72     	; 0xd94 <main+0x4ca>

	while(n==6)
	{
		unsigned int left_sensor=ADC_Conversion(1);
		unsigned int right_sensor=ADC_Conversion(3);
		unsigned int centre_sensor=ADC_Conversion(2);
     d4c:	6d 2d       	mov	r22, r13
     d4e:	70 e0       	ldi	r23, 0x00	; 0
		
		natural_behav();
		
		if(left_sensor> x && centre_sensor> y && right_sensor> x)
     d50:	40 91 04 02 	lds	r20, 0x0204
     d54:	50 91 05 02 	lds	r21, 0x0205
     d58:	46 17       	cp	r20, r22
     d5a:	57 07       	cpc	r21, r23
     d5c:	d8 f4       	brcc	.+54     	; 0xd94 <main+0x4ca>
	}

	while(n==6)
	{
		unsigned int left_sensor=ADC_Conversion(1);
		unsigned int right_sensor=ADC_Conversion(3);
     d5e:	8c 2d       	mov	r24, r12
     d60:	90 e0       	ldi	r25, 0x00	; 0
		unsigned int centre_sensor=ADC_Conversion(2);
		
		natural_behav();
		
		if(left_sensor> x && centre_sensor> y && right_sensor> x)
     d62:	28 17       	cp	r18, r24
     d64:	39 07       	cpc	r19, r25
     d66:	b0 f4       	brcc	.+44     	; 0xd94 <main+0x4ca>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     d68:	f8 01       	movw	r30, r16
     d6a:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
     d6c:	f8 82       	st	Y, r15
		{
			velocity(150,150);
			forward();
     d6e:	61 dc       	rcall	.-1854   	; 0x632 <forward>
     d70:	ff ef       	ldi	r31, 0xFF	; 255
     d72:	2f eb       	ldi	r18, 0xBF	; 191
     d74:	3f e0       	ldi	r19, 0x0F	; 15
     d76:	f1 50       	subi	r31, 0x01	; 1
     d78:	20 40       	sbci	r18, 0x00	; 0
     d7a:	30 40       	sbci	r19, 0x00	; 0
     d7c:	e1 f7       	brne	.-8      	; 0xd76 <main+0x4ac>
     d7e:	00 c0       	rjmp	.+0      	; 0xd80 <main+0x4b6>
     d80:	00 00       	nop
			_delay_ms(350);
			
			n++;
     d82:	80 91 02 02 	lds	r24, 0x0202
     d86:	90 91 03 02 	lds	r25, 0x0203
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	90 93 03 02 	sts	0x0203, r25
     d90:	80 93 02 02 	sts	0x0202, r24
			
			n++;
		}
	}

	while(n==6)
     d94:	80 91 02 02 	lds	r24, 0x0202
     d98:	90 91 03 02 	lds	r25, 0x0203
     d9c:	06 97       	sbiw	r24, 0x06	; 6
     d9e:	09 f4       	brne	.+2      	; 0xda2 <main+0x4d8>
     da0:	c2 cf       	rjmp	.-124    	; 0xd26 <main+0x45c>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     da2:	08 e2       	ldi	r16, 0x28	; 40
     da4:	11 e0       	ldi	r17, 0x01	; 1
     da6:	0f 2e       	mov	r0, r31
     da8:	f6 e9       	ldi	r31, 0x96	; 150
     daa:	ff 2e       	mov	r15, r31
     dac:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
     dae:	ca e2       	ldi	r28, 0x2A	; 42
     db0:	d1 e0       	ldi	r29, 0x01	; 1
     db2:	37 c0       	rjmp	.+110    	; 0xe22 <main+0x558>
		}
	}
	
	while(n==7)
	{
		unsigned int left_sensor=ADC_Conversion(1);
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	dd db       	rcall	.-2118   	; 0x572 <ADC_Conversion>
     db8:	e8 2e       	mov	r14, r24
		unsigned int right_sensor=ADC_Conversion(3);
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	da db       	rcall	.-2124   	; 0x572 <ADC_Conversion>
     dbe:	c8 2e       	mov	r12, r24
		unsigned int centre_sensor=ADC_Conversion(2);
     dc0:	82 e0       	ldi	r24, 0x02	; 2
     dc2:	d7 db       	rcall	.-2130   	; 0x572 <ADC_Conversion>
     dc4:	d8 2e       	mov	r13, r24
		
		natural_behav();
     dc6:	c5 dc       	rcall	.-1654   	; 0x752 <natural_behav>
		
		if(left_sensor > x && centre_sensor> y && right_sensor> x)
     dc8:	20 91 06 02 	lds	r18, 0x0206
     dcc:	30 91 07 02 	lds	r19, 0x0207
		}
	}
	
	while(n==7)
	{
		unsigned int left_sensor=ADC_Conversion(1);
     dd0:	4e 2d       	mov	r20, r14
     dd2:	50 e0       	ldi	r21, 0x00	; 0
		unsigned int right_sensor=ADC_Conversion(3);
		unsigned int centre_sensor=ADC_Conversion(2);
		
		natural_behav();
		
		if(left_sensor > x && centre_sensor> y && right_sensor> x)
     dd4:	24 17       	cp	r18, r20
     dd6:	35 07       	cpc	r19, r21
     dd8:	20 f5       	brcc	.+72     	; 0xe22 <main+0x558>
	
	while(n==7)
	{
		unsigned int left_sensor=ADC_Conversion(1);
		unsigned int right_sensor=ADC_Conversion(3);
		unsigned int centre_sensor=ADC_Conversion(2);
     dda:	6d 2d       	mov	r22, r13
     ddc:	70 e0       	ldi	r23, 0x00	; 0
		
		natural_behav();
		
		if(left_sensor > x && centre_sensor> y && right_sensor> x)
     dde:	40 91 04 02 	lds	r20, 0x0204
     de2:	50 91 05 02 	lds	r21, 0x0205
     de6:	46 17       	cp	r20, r22
     de8:	57 07       	cpc	r21, r23
     dea:	d8 f4       	brcc	.+54     	; 0xe22 <main+0x558>
	}
	
	while(n==7)
	{
		unsigned int left_sensor=ADC_Conversion(1);
		unsigned int right_sensor=ADC_Conversion(3);
     dec:	8c 2d       	mov	r24, r12
     dee:	90 e0       	ldi	r25, 0x00	; 0
		unsigned int centre_sensor=ADC_Conversion(2);
		
		natural_behav();
		
		if(left_sensor > x && centre_sensor> y && right_sensor> x)
     df0:	28 17       	cp	r18, r24
     df2:	39 07       	cpc	r19, r25
     df4:	b0 f4       	brcc	.+44     	; 0xe22 <main+0x558>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     df6:	f8 01       	movw	r30, r16
     df8:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
     dfa:	f8 82       	st	Y, r15
		{
			velocity(150,150);
			forward();
     dfc:	1a dc       	rcall	.-1996   	; 0x632 <forward>
     dfe:	ff ef       	ldi	r31, 0xFF	; 255
     e00:	2f eb       	ldi	r18, 0xBF	; 191
     e02:	3f e0       	ldi	r19, 0x0F	; 15
     e04:	f1 50       	subi	r31, 0x01	; 1
     e06:	20 40       	sbci	r18, 0x00	; 0
     e08:	30 40       	sbci	r19, 0x00	; 0
     e0a:	e1 f7       	brne	.-8      	; 0xe04 <main+0x53a>
     e0c:	00 c0       	rjmp	.+0      	; 0xe0e <main+0x544>
     e0e:	00 00       	nop
			_delay_ms(350);
			
			n++;
     e10:	80 91 02 02 	lds	r24, 0x0202
     e14:	90 91 03 02 	lds	r25, 0x0203
     e18:	01 96       	adiw	r24, 0x01	; 1
     e1a:	90 93 03 02 	sts	0x0203, r25
     e1e:	80 93 02 02 	sts	0x0202, r24
			
			n++;
		}
	}
	
	while(n==7)
     e22:	80 91 02 02 	lds	r24, 0x0202
     e26:	90 91 03 02 	lds	r25, 0x0203
     e2a:	07 97       	sbiw	r24, 0x07	; 7
     e2c:	09 f4       	brne	.+2      	; 0xe30 <main+0x566>
     e2e:	c2 cf       	rjmp	.-124    	; 0xdb4 <main+0x4ea>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     e30:	08 e2       	ldi	r16, 0x28	; 40
     e32:	11 e0       	ldi	r17, 0x01	; 1
     e34:	0f 2e       	mov	r0, r31
     e36:	f6 e9       	ldi	r31, 0x96	; 150
     e38:	ff 2e       	mov	r15, r31
     e3a:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
     e3c:	ca e2       	ldi	r28, 0x2A	; 42
     e3e:	d1 e0       	ldi	r29, 0x01	; 1
     e40:	44 c0       	rjmp	.+136    	; 0xeca <main+0x600>
		}
	}
	
	while(n==8)
	{
		unsigned int left_sensor=ADC_Conversion(1);
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	96 db       	rcall	.-2260   	; 0x572 <ADC_Conversion>
     e46:	e8 2e       	mov	r14, r24
		unsigned int right_sensor=ADC_Conversion(3);
     e48:	83 e0       	ldi	r24, 0x03	; 3
     e4a:	93 db       	rcall	.-2266   	; 0x572 <ADC_Conversion>
     e4c:	c8 2e       	mov	r12, r24
		unsigned int centre_sensor=ADC_Conversion(2);
     e4e:	82 e0       	ldi	r24, 0x02	; 2
     e50:	90 db       	rcall	.-2272   	; 0x572 <ADC_Conversion>
     e52:	d8 2e       	mov	r13, r24
		
		natural_behav();
     e54:	7e dc       	rcall	.-1796   	; 0x752 <natural_behav>
		
		if(left_sensor> x && centre_sensor> y && right_sensor> x)
     e56:	20 91 06 02 	lds	r18, 0x0206
     e5a:	30 91 07 02 	lds	r19, 0x0207
		}
	}
	
	while(n==8)
	{
		unsigned int left_sensor=ADC_Conversion(1);
     e5e:	4e 2d       	mov	r20, r14
     e60:	50 e0       	ldi	r21, 0x00	; 0
		unsigned int right_sensor=ADC_Conversion(3);
		unsigned int centre_sensor=ADC_Conversion(2);
		
		natural_behav();
		
		if(left_sensor> x && centre_sensor> y && right_sensor> x)
     e62:	24 17       	cp	r18, r20
     e64:	35 07       	cpc	r19, r21
     e66:	88 f5       	brcc	.+98     	; 0xeca <main+0x600>
	
	while(n==8)
	{
		unsigned int left_sensor=ADC_Conversion(1);
		unsigned int right_sensor=ADC_Conversion(3);
		unsigned int centre_sensor=ADC_Conversion(2);
     e68:	6d 2d       	mov	r22, r13
     e6a:	70 e0       	ldi	r23, 0x00	; 0
		
		natural_behav();
		
		if(left_sensor> x && centre_sensor> y && right_sensor> x)
     e6c:	40 91 04 02 	lds	r20, 0x0204
     e70:	50 91 05 02 	lds	r21, 0x0205
     e74:	46 17       	cp	r20, r22
     e76:	57 07       	cpc	r21, r23
     e78:	40 f5       	brcc	.+80     	; 0xeca <main+0x600>
	}
	
	while(n==8)
	{
		unsigned int left_sensor=ADC_Conversion(1);
		unsigned int right_sensor=ADC_Conversion(3);
     e7a:	8c 2d       	mov	r24, r12
     e7c:	90 e0       	ldi	r25, 0x00	; 0
		unsigned int centre_sensor=ADC_Conversion(2);
		
		natural_behav();
		
		if(left_sensor> x && centre_sensor> y && right_sensor> x)
     e7e:	28 17       	cp	r18, r24
     e80:	39 07       	cpc	r19, r25
     e82:	18 f5       	brcc	.+70     	; 0xeca <main+0x600>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     e84:	f8 01       	movw	r30, r16
     e86:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
     e88:	f8 82       	st	Y, r15
		{
			velocity(150,150);
			forward();
     e8a:	d3 db       	rcall	.-2138   	; 0x632 <forward>
     e8c:	ff ef       	ldi	r31, 0xFF	; 255
     e8e:	2f eb       	ldi	r18, 0xBF	; 191
     e90:	3f e0       	ldi	r19, 0x0F	; 15
     e92:	f1 50       	subi	r31, 0x01	; 1
     e94:	20 40       	sbci	r18, 0x00	; 0
     e96:	30 40       	sbci	r19, 0x00	; 0
     e98:	e1 f7       	brne	.-8      	; 0xe92 <main+0x5c8>
     e9a:	00 c0       	rjmp	.+0      	; 0xe9c <main+0x5d2>
     e9c:	00 00       	nop
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     e9e:	f8 01       	movw	r30, r16
     ea0:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
     ea2:	f8 82       	st	Y, r15
			_delay_ms(350);
			
			velocity(150,150);
			right();
     ea4:	cf db       	rcall	.-2146   	; 0x644 <right>
     ea6:	ff ef       	ldi	r31, 0xFF	; 255
     ea8:	2f e3       	ldi	r18, 0x3F	; 63
     eaa:	36 e2       	ldi	r19, 0x26	; 38
     eac:	f1 50       	subi	r31, 0x01	; 1
     eae:	20 40       	sbci	r18, 0x00	; 0
     eb0:	30 40       	sbci	r19, 0x00	; 0
     eb2:	e1 f7       	brne	.-8      	; 0xeac <main+0x5e2>
     eb4:	00 c0       	rjmp	.+0      	; 0xeb6 <main+0x5ec>
     eb6:	00 00       	nop
			_delay_ms(850);
			
			n++;
     eb8:	80 91 02 02 	lds	r24, 0x0202
     ebc:	90 91 03 02 	lds	r25, 0x0203
     ec0:	01 96       	adiw	r24, 0x01	; 1
     ec2:	90 93 03 02 	sts	0x0203, r25
     ec6:	80 93 02 02 	sts	0x0202, r24
			
			n++;
		}
	}
	
	while(n==8)
     eca:	80 91 02 02 	lds	r24, 0x0202
     ece:	90 91 03 02 	lds	r25, 0x0203
     ed2:	08 97       	sbiw	r24, 0x08	; 8
     ed4:	09 f4       	brne	.+2      	; 0xed8 <main+0x60e>
     ed6:	b5 cf       	rjmp	.-150    	; 0xe42 <main+0x578>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     ed8:	08 e2       	ldi	r16, 0x28	; 40
     eda:	11 e0       	ldi	r17, 0x01	; 1
     edc:	0f 2e       	mov	r0, r31
     ede:	f6 e9       	ldi	r31, 0x96	; 150
     ee0:	ff 2e       	mov	r15, r31
     ee2:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
     ee4:	ca e2       	ldi	r28, 0x2A	; 42
     ee6:	d1 e0       	ldi	r29, 0x01	; 1
     ee8:	37 c0       	rjmp	.+110    	; 0xf58 <main+0x68e>
		}
	}
	
	while(n==9)
	{
		unsigned int left_sensor=ADC_Conversion(1);
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	42 db       	rcall	.-2428   	; 0x572 <ADC_Conversion>
     eee:	e8 2e       	mov	r14, r24
		unsigned int right_sensor=ADC_Conversion(3);
     ef0:	83 e0       	ldi	r24, 0x03	; 3
     ef2:	3f db       	rcall	.-2434   	; 0x572 <ADC_Conversion>
     ef4:	c8 2e       	mov	r12, r24
		unsigned int centre_sensor=ADC_Conversion(2);
     ef6:	82 e0       	ldi	r24, 0x02	; 2
     ef8:	3c db       	rcall	.-2440   	; 0x572 <ADC_Conversion>
     efa:	d8 2e       	mov	r13, r24
		
		natural_behav();
     efc:	2a dc       	rcall	.-1964   	; 0x752 <natural_behav>
		
		if(left_sensor> x && centre_sensor> y && right_sensor> x)
     efe:	20 91 06 02 	lds	r18, 0x0206
     f02:	30 91 07 02 	lds	r19, 0x0207
		}
	}
	
	while(n==9)
	{
		unsigned int left_sensor=ADC_Conversion(1);
     f06:	4e 2d       	mov	r20, r14
     f08:	50 e0       	ldi	r21, 0x00	; 0
		unsigned int right_sensor=ADC_Conversion(3);
		unsigned int centre_sensor=ADC_Conversion(2);
		
		natural_behav();
		
		if(left_sensor> x && centre_sensor> y && right_sensor> x)
     f0a:	24 17       	cp	r18, r20
     f0c:	35 07       	cpc	r19, r21
     f0e:	20 f5       	brcc	.+72     	; 0xf58 <main+0x68e>
	
	while(n==9)
	{
		unsigned int left_sensor=ADC_Conversion(1);
		unsigned int right_sensor=ADC_Conversion(3);
		unsigned int centre_sensor=ADC_Conversion(2);
     f10:	6d 2d       	mov	r22, r13
     f12:	70 e0       	ldi	r23, 0x00	; 0
		
		natural_behav();
		
		if(left_sensor> x && centre_sensor> y && right_sensor> x)
     f14:	40 91 04 02 	lds	r20, 0x0204
     f18:	50 91 05 02 	lds	r21, 0x0205
     f1c:	46 17       	cp	r20, r22
     f1e:	57 07       	cpc	r21, r23
     f20:	d8 f4       	brcc	.+54     	; 0xf58 <main+0x68e>
	}
	
	while(n==9)
	{
		unsigned int left_sensor=ADC_Conversion(1);
		unsigned int right_sensor=ADC_Conversion(3);
     f22:	8c 2d       	mov	r24, r12
     f24:	90 e0       	ldi	r25, 0x00	; 0
		unsigned int centre_sensor=ADC_Conversion(2);
		
		natural_behav();
		
		if(left_sensor> x && centre_sensor> y && right_sensor> x)
     f26:	28 17       	cp	r18, r24
     f28:	39 07       	cpc	r19, r25
     f2a:	b0 f4       	brcc	.+44     	; 0xf58 <main+0x68e>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     f2c:	f8 01       	movw	r30, r16
     f2e:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
     f30:	f8 82       	st	Y, r15
		{
			velocity(150,150);
			forward();
     f32:	7f db       	rcall	.-2306   	; 0x632 <forward>
     f34:	ff ef       	ldi	r31, 0xFF	; 255
     f36:	2f e3       	ldi	r18, 0x3F	; 63
     f38:	3b e0       	ldi	r19, 0x0B	; 11
     f3a:	f1 50       	subi	r31, 0x01	; 1
     f3c:	20 40       	sbci	r18, 0x00	; 0
     f3e:	30 40       	sbci	r19, 0x00	; 0
     f40:	e1 f7       	brne	.-8      	; 0xf3a <main+0x670>
     f42:	00 c0       	rjmp	.+0      	; 0xf44 <main+0x67a>
     f44:	00 00       	nop
			_delay_ms(250);

			n++;
     f46:	80 91 02 02 	lds	r24, 0x0202
     f4a:	90 91 03 02 	lds	r25, 0x0203
     f4e:	01 96       	adiw	r24, 0x01	; 1
     f50:	90 93 03 02 	sts	0x0203, r25
     f54:	80 93 02 02 	sts	0x0202, r24
			
			n++;
		}
	}
	
	while(n==9)
     f58:	80 91 02 02 	lds	r24, 0x0202
     f5c:	90 91 03 02 	lds	r25, 0x0203
     f60:	09 97       	sbiw	r24, 0x09	; 9
     f62:	09 f4       	brne	.+2      	; 0xf66 <main+0x69c>
     f64:	c2 cf       	rjmp	.-124    	; 0xeea <main+0x620>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     f66:	08 e2       	ldi	r16, 0x28	; 40
     f68:	11 e0       	ldi	r17, 0x01	; 1
     f6a:	0f 2e       	mov	r0, r31
     f6c:	f0 e5       	ldi	r31, 0x50	; 80
     f6e:	ff 2e       	mov	r15, r31
     f70:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
     f72:	ca e2       	ldi	r28, 0x2A	; 42
     f74:	d1 e0       	ldi	r29, 0x01	; 1
     f76:	4b c0       	rjmp	.+150    	; 0x100e <main+0x744>
		}
	}
	
	while(n==10)		//for placement of contruction material 
	{
		unsigned int left_sensor=ADC_Conversion(1);
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	fb da       	rcall	.-2570   	; 0x572 <ADC_Conversion>
		unsigned int right_sensor=ADC_Conversion(3);
     f7c:	83 e0       	ldi	r24, 0x03	; 3
     f7e:	f9 da       	rcall	.-2574   	; 0x572 <ADC_Conversion>
		unsigned int centre_sensor=ADC_Conversion(2);
     f80:	82 e0       	ldi	r24, 0x02	; 2
     f82:	f7 da       	rcall	.-2578   	; 0x572 <ADC_Conversion>
		prox_value1 = ADC_Conversion(9);
     f84:	89 e0       	ldi	r24, 0x09	; 9
     f86:	f5 da       	rcall	.-2582   	; 0x572 <ADC_Conversion>
     f88:	80 93 11 02 	sts	0x0211, r24
		prox = Sharp_GP2D12_estimation(prox_value1);
     f8c:	0d db       	rcall	.-2534   	; 0x5a8 <Sharp_GP2D12_estimation>
     f8e:	90 93 01 02 	sts	0x0201, r25
     f92:	80 93 00 02 	sts	0x0200, r24
		lcd_print(2,14,prox,3);
     f96:	23 e0       	ldi	r18, 0x03	; 3
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	ac 01       	movw	r20, r24
     f9c:	6e e0       	ldi	r22, 0x0E	; 14
     f9e:	82 e0       	ldi	r24, 0x02	; 2
     fa0:	ce d9       	rcall	.-3172   	; 0x33e <lcd_print>
		
		
		if(prox >81 && prox <83)
     fa2:	80 91 00 02 	lds	r24, 0x0200
     fa6:	90 91 01 02 	lds	r25, 0x0201
     faa:	82 35       	cpi	r24, 0x52	; 82
     fac:	91 05       	cpc	r25, r1
     fae:	41 f5       	brne	.+80     	; 0x1000 <main+0x736>
		{
			stop();
     fb0:	43 db       	rcall	.-2426   	; 0x638 <stop>
     fb2:	4f ef       	ldi	r20, 0xFF	; 255
     fb4:	8f ef       	ldi	r24, 0xFF	; 255
     fb6:	9c e2       	ldi	r25, 0x2C	; 44
     fb8:	41 50       	subi	r20, 0x01	; 1
     fba:	80 40       	sbci	r24, 0x00	; 0
     fbc:	90 40       	sbci	r25, 0x00	; 0
     fbe:	e1 f7       	brne	.-8      	; 0xfb8 <main+0x6ee>
     fc0:	00 c0       	rjmp	.+0      	; 0xfc2 <main+0x6f8>
     fc2:	00 00       	nop
			_delay_ms(1000);
			
			place();
     fc4:	c0 db       	rcall	.-2176   	; 0x746 <place>
     fc6:	ef ef       	ldi	r30, 0xFF	; 255
     fc8:	ff ef       	ldi	r31, 0xFF	; 255
     fca:	2c e2       	ldi	r18, 0x2C	; 44
     fcc:	e1 50       	subi	r30, 0x01	; 1
     fce:	f0 40       	sbci	r31, 0x00	; 0
     fd0:	20 40       	sbci	r18, 0x00	; 0
     fd2:	e1 f7       	brne	.-8      	; 0xfcc <main+0x702>
     fd4:	00 c0       	rjmp	.+0      	; 0xfd6 <main+0x70c>
     fd6:	00 00       	nop
			_delay_ms(1000);
			
			back();
     fd8:	38 db       	rcall	.-2448   	; 0x64a <back>
     fda:	3f ef       	ldi	r19, 0xFF	; 255
     fdc:	4f e3       	ldi	r20, 0x3F	; 63
     fde:	8b e0       	ldi	r24, 0x0B	; 11
     fe0:	31 50       	subi	r19, 0x01	; 1
     fe2:	40 40       	sbci	r20, 0x00	; 0
     fe4:	80 40       	sbci	r24, 0x00	; 0
     fe6:	e1 f7       	brne	.-8      	; 0xfe0 <main+0x716>
     fe8:	00 c0       	rjmp	.+0      	; 0xfea <main+0x720>
     fea:	00 00       	nop
			_delay_ms(250);
			n++;
     fec:	80 91 02 02 	lds	r24, 0x0202
     ff0:	90 91 03 02 	lds	r25, 0x0203
     ff4:	01 96       	adiw	r24, 0x01	; 1
     ff6:	90 93 03 02 	sts	0x0203, r25
     ffa:	80 93 02 02 	sts	0x0202, r24
     ffe:	07 c0       	rjmp	.+14     	; 0x100e <main+0x744>
		}
		else if (prox >84)
    1000:	85 35       	cpi	r24, 0x55	; 85
    1002:	91 05       	cpc	r25, r1
    1004:	20 f0       	brcs	.+8      	; 0x100e <main+0x744>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1006:	f8 01       	movw	r30, r16
    1008:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
    100a:	f8 82       	st	Y, r15
		{	
			velocity(80,80);
			forward();
    100c:	12 db       	rcall	.-2524   	; 0x632 <forward>

			n++;
		}
	}
	
	while(n==10)		//for placement of contruction material 
    100e:	80 91 02 02 	lds	r24, 0x0202
    1012:	90 91 03 02 	lds	r25, 0x0203
    1016:	0a 97       	sbiw	r24, 0x0a	; 10
    1018:	09 f4       	brne	.+2      	; 0x101c <main+0x752>
    101a:	ae cf       	rjmp	.-164    	; 0xf78 <main+0x6ae>
    101c:	34 c0       	rjmp	.+104    	; 0x1086 <main+0x7bc>
			
	}
	
	while(n==11)
	{
		unsigned int left_sensor=ADC_Conversion(1);
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	a8 da       	rcall	.-2736   	; 0x572 <ADC_Conversion>
    1022:	c8 2f       	mov	r28, r24
		unsigned int right_sensor=ADC_Conversion(3);
    1024:	83 e0       	ldi	r24, 0x03	; 3
    1026:	a5 da       	rcall	.-2742   	; 0x572 <ADC_Conversion>
    1028:	18 2f       	mov	r17, r24
		unsigned int centre_sensor=ADC_Conversion(2);
    102a:	82 e0       	ldi	r24, 0x02	; 2
    102c:	a2 da       	rcall	.-2748   	; 0x572 <ADC_Conversion>
    102e:	d8 2f       	mov	r29, r24
		
		back_behav();
    1030:	ee db       	rcall	.-2084   	; 0x80e <back_behav>
		
		if(left_sensor > x && centre_sensor > y && right_sensor >x)
    1032:	20 91 06 02 	lds	r18, 0x0206
    1036:	30 91 07 02 	lds	r19, 0x0207
			
	}
	
	while(n==11)
	{
		unsigned int left_sensor=ADC_Conversion(1);
    103a:	4c 2f       	mov	r20, r28
    103c:	50 e0       	ldi	r21, 0x00	; 0
		unsigned int right_sensor=ADC_Conversion(3);
		unsigned int centre_sensor=ADC_Conversion(2);
		
		back_behav();
		
		if(left_sensor > x && centre_sensor > y && right_sensor >x)
    103e:	24 17       	cp	r18, r20
    1040:	35 07       	cpc	r19, r21
    1042:	08 f5       	brcc	.+66     	; 0x1086 <main+0x7bc>
	
	while(n==11)
	{
		unsigned int left_sensor=ADC_Conversion(1);
		unsigned int right_sensor=ADC_Conversion(3);
		unsigned int centre_sensor=ADC_Conversion(2);
    1044:	6d 2f       	mov	r22, r29
    1046:	70 e0       	ldi	r23, 0x00	; 0
		
		back_behav();
		
		if(left_sensor > x && centre_sensor > y && right_sensor >x)
    1048:	40 91 04 02 	lds	r20, 0x0204
    104c:	50 91 05 02 	lds	r21, 0x0205
    1050:	46 17       	cp	r20, r22
    1052:	57 07       	cpc	r21, r23
    1054:	c0 f4       	brcc	.+48     	; 0x1086 <main+0x7bc>
	}
	
	while(n==11)
	{
		unsigned int left_sensor=ADC_Conversion(1);
		unsigned int right_sensor=ADC_Conversion(3);
    1056:	81 2f       	mov	r24, r17
    1058:	90 e0       	ldi	r25, 0x00	; 0
		unsigned int centre_sensor=ADC_Conversion(2);
		
		back_behav();
		
		if(left_sensor > x && centre_sensor > y && right_sensor >x)
    105a:	28 17       	cp	r18, r24
    105c:	39 07       	cpc	r19, r25
    105e:	98 f4       	brcc	.+38     	; 0x1086 <main+0x7bc>
		{
			left();
    1060:	ee da       	rcall	.-2596   	; 0x63e <left>
    1062:	ff ef       	ldi	r31, 0xFF	; 255
    1064:	2f ef       	ldi	r18, 0xFF	; 255
    1066:	3a e1       	ldi	r19, 0x1A	; 26
    1068:	f1 50       	subi	r31, 0x01	; 1
    106a:	20 40       	sbci	r18, 0x00	; 0
    106c:	30 40       	sbci	r19, 0x00	; 0
    106e:	e1 f7       	brne	.-8      	; 0x1068 <main+0x79e>
    1070:	00 c0       	rjmp	.+0      	; 0x1072 <main+0x7a8>
    1072:	00 00       	nop
			_delay_ms(600);
			n++;
    1074:	80 91 02 02 	lds	r24, 0x0202
    1078:	90 91 03 02 	lds	r25, 0x0203
    107c:	01 96       	adiw	r24, 0x01	; 1
    107e:	90 93 03 02 	sts	0x0203, r25
    1082:	80 93 02 02 	sts	0x0202, r24
		}
		
			
	}
	
	while(n==11)
    1086:	80 91 02 02 	lds	r24, 0x0202
    108a:	90 91 03 02 	lds	r25, 0x0203
    108e:	0b 97       	sbiw	r24, 0x0b	; 11
    1090:	31 f2       	breq	.-116    	; 0x101e <main+0x754>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1092:	08 e2       	ldi	r16, 0x28	; 40
    1094:	11 e0       	ldi	r17, 0x01	; 1
    1096:	0f 2e       	mov	r0, r31
    1098:	f6 e9       	ldi	r31, 0x96	; 150
    109a:	ff 2e       	mov	r15, r31
    109c:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
    109e:	ca e2       	ldi	r28, 0x2A	; 42
    10a0:	d1 e0       	ldi	r29, 0x01	; 1
    10a2:	44 c0       	rjmp	.+136    	; 0x112c <main+0x862>
	/******************************H4 STARTS**************************/
	
	while(n==12)
		{
		
			unsigned int left_sensor=ADC_Conversion(1);
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	65 da       	rcall	.-2870   	; 0x572 <ADC_Conversion>
    10a8:	e8 2e       	mov	r14, r24
			unsigned int right_sensor=ADC_Conversion(3);
    10aa:	83 e0       	ldi	r24, 0x03	; 3
    10ac:	62 da       	rcall	.-2876   	; 0x572 <ADC_Conversion>
    10ae:	c8 2e       	mov	r12, r24
			unsigned int centre_sensor=ADC_Conversion(2);
    10b0:	82 e0       	ldi	r24, 0x02	; 2
    10b2:	5f da       	rcall	.-2882   	; 0x572 <ADC_Conversion>
    10b4:	d8 2e       	mov	r13, r24
			
			natural_behav();
    10b6:	4d db       	rcall	.-2406   	; 0x752 <natural_behav>
			
			if(left_sensor> x && centre_sensor> y && right_sensor> x)
    10b8:	20 91 06 02 	lds	r18, 0x0206
    10bc:	30 91 07 02 	lds	r19, 0x0207
	/******************************H4 STARTS**************************/
	
	while(n==12)
		{
		
			unsigned int left_sensor=ADC_Conversion(1);
    10c0:	4e 2d       	mov	r20, r14
    10c2:	50 e0       	ldi	r21, 0x00	; 0
			unsigned int right_sensor=ADC_Conversion(3);
			unsigned int centre_sensor=ADC_Conversion(2);
			
			natural_behav();
			
			if(left_sensor> x && centre_sensor> y && right_sensor> x)
    10c4:	24 17       	cp	r18, r20
    10c6:	35 07       	cpc	r19, r21
    10c8:	88 f5       	brcc	.+98     	; 0x112c <main+0x862>
	while(n==12)
		{
		
			unsigned int left_sensor=ADC_Conversion(1);
			unsigned int right_sensor=ADC_Conversion(3);
			unsigned int centre_sensor=ADC_Conversion(2);
    10ca:	6d 2d       	mov	r22, r13
    10cc:	70 e0       	ldi	r23, 0x00	; 0
			
			natural_behav();
			
			if(left_sensor> x && centre_sensor> y && right_sensor> x)
    10ce:	40 91 04 02 	lds	r20, 0x0204
    10d2:	50 91 05 02 	lds	r21, 0x0205
    10d6:	46 17       	cp	r20, r22
    10d8:	57 07       	cpc	r21, r23
    10da:	40 f5       	brcc	.+80     	; 0x112c <main+0x862>
	
	while(n==12)
		{
		
			unsigned int left_sensor=ADC_Conversion(1);
			unsigned int right_sensor=ADC_Conversion(3);
    10dc:	8c 2d       	mov	r24, r12
    10de:	90 e0       	ldi	r25, 0x00	; 0
			unsigned int centre_sensor=ADC_Conversion(2);
			
			natural_behav();
			
			if(left_sensor> x && centre_sensor> y && right_sensor> x)
    10e0:	28 17       	cp	r18, r24
    10e2:	39 07       	cpc	r19, r25
    10e4:	18 f5       	brcc	.+70     	; 0x112c <main+0x862>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    10e6:	f8 01       	movw	r30, r16
    10e8:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
    10ea:	f8 82       	st	Y, r15
			{	
				velocity(150,150);
				forward();
    10ec:	a2 da       	rcall	.-2748   	; 0x632 <forward>
    10ee:	ff ef       	ldi	r31, 0xFF	; 255
    10f0:	2f eb       	ldi	r18, 0xBF	; 191
    10f2:	3f e0       	ldi	r19, 0x0F	; 15
    10f4:	f1 50       	subi	r31, 0x01	; 1
    10f6:	20 40       	sbci	r18, 0x00	; 0
    10f8:	30 40       	sbci	r19, 0x00	; 0
    10fa:	e1 f7       	brne	.-8      	; 0x10f4 <main+0x82a>
    10fc:	00 c0       	rjmp	.+0      	; 0x10fe <main+0x834>
    10fe:	00 00       	nop
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1100:	f8 01       	movw	r30, r16
    1102:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
    1104:	f8 82       	st	Y, r15
				_delay_ms(350);
			
				velocity(150,150);
				left();
    1106:	9b da       	rcall	.-2762   	; 0x63e <left>
    1108:	ff ef       	ldi	r31, 0xFF	; 255
    110a:	2f e3       	ldi	r18, 0x3F	; 63
    110c:	36 e2       	ldi	r19, 0x26	; 38
    110e:	f1 50       	subi	r31, 0x01	; 1
    1110:	20 40       	sbci	r18, 0x00	; 0
    1112:	30 40       	sbci	r19, 0x00	; 0
    1114:	e1 f7       	brne	.-8      	; 0x110e <main+0x844>
    1116:	00 c0       	rjmp	.+0      	; 0x1118 <main+0x84e>
    1118:	00 00       	nop
				_delay_ms(850);
				
				n++;
    111a:	80 91 02 02 	lds	r24, 0x0202
    111e:	90 91 03 02 	lds	r25, 0x0203
    1122:	01 96       	adiw	r24, 0x01	; 1
    1124:	90 93 03 02 	sts	0x0203, r25
    1128:	80 93 02 02 	sts	0x0202, r24
			n++;
		}
	}
	/******************************H4 STARTS**************************/
	
	while(n==12)
    112c:	80 91 02 02 	lds	r24, 0x0202
    1130:	90 91 03 02 	lds	r25, 0x0203
    1134:	0c 97       	sbiw	r24, 0x0c	; 12
    1136:	09 f4       	brne	.+2      	; 0x113a <main+0x870>
    1138:	b5 cf       	rjmp	.-150    	; 0x10a4 <main+0x7da>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    113a:	08 e2       	ldi	r16, 0x28	; 40
    113c:	11 e0       	ldi	r17, 0x01	; 1
    113e:	0f 2e       	mov	r0, r31
    1140:	f6 e9       	ldi	r31, 0x96	; 150
    1142:	ff 2e       	mov	r15, r31
    1144:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
    1146:	ca e2       	ldi	r28, 0x2A	; 42
    1148:	d1 e0       	ldi	r29, 0x01	; 1
    114a:	41 c0       	rjmp	.+130    	; 0x11ce <main+0x904>
		
		}
			
		while(n==13)
		{
			unsigned int left_sensor=ADC_Conversion(1);
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	11 da       	rcall	.-3038   	; 0x572 <ADC_Conversion>
    1150:	e8 2e       	mov	r14, r24
			unsigned int right_sensor=ADC_Conversion(3);
    1152:	83 e0       	ldi	r24, 0x03	; 3
    1154:	0e da       	rcall	.-3044   	; 0x572 <ADC_Conversion>
    1156:	c8 2e       	mov	r12, r24
			unsigned int centre_sensor=ADC_Conversion(2);
    1158:	82 e0       	ldi	r24, 0x02	; 2
    115a:	0b da       	rcall	.-3050   	; 0x572 <ADC_Conversion>
    115c:	d8 2e       	mov	r13, r24
			
			natural_behav();
    115e:	f9 da       	rcall	.-2574   	; 0x752 <natural_behav>

			if(left_sensor> x && centre_sensor> y && right_sensor> x)
    1160:	20 91 06 02 	lds	r18, 0x0206
    1164:	30 91 07 02 	lds	r19, 0x0207
		
		}
			
		while(n==13)
		{
			unsigned int left_sensor=ADC_Conversion(1);
    1168:	4e 2d       	mov	r20, r14
    116a:	50 e0       	ldi	r21, 0x00	; 0
			unsigned int right_sensor=ADC_Conversion(3);
			unsigned int centre_sensor=ADC_Conversion(2);
			
			natural_behav();

			if(left_sensor> x && centre_sensor> y && right_sensor> x)
    116c:	24 17       	cp	r18, r20
    116e:	35 07       	cpc	r19, r21
    1170:	70 f5       	brcc	.+92     	; 0x11ce <main+0x904>
			
		while(n==13)
		{
			unsigned int left_sensor=ADC_Conversion(1);
			unsigned int right_sensor=ADC_Conversion(3);
			unsigned int centre_sensor=ADC_Conversion(2);
    1172:	6d 2d       	mov	r22, r13
    1174:	70 e0       	ldi	r23, 0x00	; 0
			
			natural_behav();

			if(left_sensor> x && centre_sensor> y && right_sensor> x)
    1176:	40 91 04 02 	lds	r20, 0x0204
    117a:	50 91 05 02 	lds	r21, 0x0205
    117e:	46 17       	cp	r20, r22
    1180:	57 07       	cpc	r21, r23
    1182:	28 f5       	brcc	.+74     	; 0x11ce <main+0x904>
		}
			
		while(n==13)
		{
			unsigned int left_sensor=ADC_Conversion(1);
			unsigned int right_sensor=ADC_Conversion(3);
    1184:	8c 2d       	mov	r24, r12
    1186:	90 e0       	ldi	r25, 0x00	; 0
			unsigned int centre_sensor=ADC_Conversion(2);
			
			natural_behav();

			if(left_sensor> x && centre_sensor> y && right_sensor> x)
    1188:	28 17       	cp	r18, r24
    118a:	39 07       	cpc	r19, r25
    118c:	00 f5       	brcc	.+64     	; 0x11ce <main+0x904>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    118e:	f8 01       	movw	r30, r16
    1190:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
    1192:	f8 82       	st	Y, r15
			{	
				velocity(150,150);
				forward();
    1194:	4e da       	rcall	.-2916   	; 0x632 <forward>
    1196:	ff ef       	ldi	r31, 0xFF	; 255
    1198:	2f eb       	ldi	r18, 0xBF	; 191
    119a:	3f e0       	ldi	r19, 0x0F	; 15
    119c:	f1 50       	subi	r31, 0x01	; 1
    119e:	20 40       	sbci	r18, 0x00	; 0
    11a0:	30 40       	sbci	r19, 0x00	; 0
    11a2:	e1 f7       	brne	.-8      	; 0x119c <main+0x8d2>
    11a4:	00 c0       	rjmp	.+0      	; 0x11a6 <main+0x8dc>
    11a6:	00 00       	nop
				_delay_ms(350);
				right();
    11a8:	4d da       	rcall	.-2918   	; 0x644 <right>
    11aa:	4f ef       	ldi	r20, 0xFF	; 255
    11ac:	8f ef       	ldi	r24, 0xFF	; 255
    11ae:	93 e2       	ldi	r25, 0x23	; 35
    11b0:	41 50       	subi	r20, 0x01	; 1
    11b2:	80 40       	sbci	r24, 0x00	; 0
    11b4:	90 40       	sbci	r25, 0x00	; 0
    11b6:	e1 f7       	brne	.-8      	; 0x11b0 <main+0x8e6>
    11b8:	00 c0       	rjmp	.+0      	; 0x11ba <main+0x8f0>
    11ba:	00 00       	nop
				_delay_ms(800);
				n++;
    11bc:	80 91 02 02 	lds	r24, 0x0202
    11c0:	90 91 03 02 	lds	r25, 0x0203
    11c4:	01 96       	adiw	r24, 0x01	; 1
    11c6:	90 93 03 02 	sts	0x0203, r25
    11ca:	80 93 02 02 	sts	0x0202, r24
			}
	
		
		}
			
		while(n==13)
    11ce:	80 91 02 02 	lds	r24, 0x0202
    11d2:	90 91 03 02 	lds	r25, 0x0203
    11d6:	0d 97       	sbiw	r24, 0x0d	; 13
    11d8:	09 f4       	brne	.+2      	; 0x11dc <main+0x912>
    11da:	b8 cf       	rjmp	.-144    	; 0x114c <main+0x882>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    11dc:	0f 2e       	mov	r0, r31
    11de:	f8 e2       	ldi	r31, 0x28	; 40
    11e0:	af 2e       	mov	r10, r31
    11e2:	bb 24       	eor	r11, r11
    11e4:	b3 94       	inc	r11
    11e6:	f0 2d       	mov	r31, r0
    11e8:	0f 2e       	mov	r0, r31
    11ea:	f4 e6       	ldi	r31, 0x64	; 100
    11ec:	9f 2e       	mov	r9, r31
    11ee:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
    11f0:	0f 2e       	mov	r0, r31
    11f2:	fa e2       	ldi	r31, 0x2A	; 42
    11f4:	cf 2e       	mov	r12, r31
    11f6:	dd 24       	eor	r13, r13
    11f8:	d3 94       	inc	r13
    11fa:	f0 2d       	mov	r31, r0
    11fc:	9c c0       	rjmp	.+312    	; 0x1336 <main+0xa6c>
		}
		

		while(n==14)
		{
			unsigned int left_sensor=ADC_Conversion(1);
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	b8 d9       	rcall	.-3216   	; 0x572 <ADC_Conversion>
    1202:	c8 2f       	mov	r28, r24
    1204:	d0 e0       	ldi	r29, 0x00	; 0
			unsigned int right_sensor=ADC_Conversion(3);
    1206:	83 e0       	ldi	r24, 0x03	; 3
    1208:	b4 d9       	rcall	.-3224   	; 0x572 <ADC_Conversion>
    120a:	e8 2e       	mov	r14, r24
    120c:	f1 2c       	mov	r15, r1
			unsigned int centre_sensor=ADC_Conversion(2);
    120e:	82 e0       	ldi	r24, 0x02	; 2
    1210:	b0 d9       	rcall	.-3232   	; 0x572 <ADC_Conversion>
    1212:	08 2f       	mov	r16, r24
    1214:	10 e0       	ldi	r17, 0x00	; 0
			if(left_sensor<x && centre_sensor <y && right_sensor>x)
    1216:	80 91 06 02 	lds	r24, 0x0206
    121a:	90 91 07 02 	lds	r25, 0x0207
    121e:	c8 17       	cp	r28, r24
    1220:	d9 07       	cpc	r29, r25
    1222:	58 f4       	brcc	.+22     	; 0x123a <main+0x970>
    1224:	20 91 04 02 	lds	r18, 0x0204
    1228:	30 91 05 02 	lds	r19, 0x0205
    122c:	02 17       	cp	r16, r18
    122e:	13 07       	cpc	r17, r19
    1230:	20 f4       	brcc	.+8      	; 0x123a <main+0x970>
    1232:	8e 15       	cp	r24, r14
    1234:	9f 05       	cpc	r25, r15
    1236:	08 f4       	brcc	.+2      	; 0x123a <main+0x970>
			{
				right();
    1238:	05 da       	rcall	.-3062   	; 0x644 <right>
			}
			if(left_sensor>x && centre_sensor <y && right_sensor<x)
    123a:	80 91 06 02 	lds	r24, 0x0206
    123e:	90 91 07 02 	lds	r25, 0x0207
    1242:	8c 17       	cp	r24, r28
    1244:	9d 07       	cpc	r25, r29
    1246:	58 f4       	brcc	.+22     	; 0x125e <main+0x994>
    1248:	20 91 04 02 	lds	r18, 0x0204
    124c:	30 91 05 02 	lds	r19, 0x0205
    1250:	02 17       	cp	r16, r18
    1252:	13 07       	cpc	r17, r19
    1254:	20 f4       	brcc	.+8      	; 0x125e <main+0x994>
    1256:	e8 16       	cp	r14, r24
    1258:	f9 06       	cpc	r15, r25
    125a:	08 f4       	brcc	.+2      	; 0x125e <main+0x994>
			{
				left();
    125c:	f0 d9       	rcall	.-3104   	; 0x63e <left>
			}
			if(left_sensor<x && centre_sensor>y && right_sensor<x)
    125e:	20 91 06 02 	lds	r18, 0x0206
    1262:	30 91 07 02 	lds	r19, 0x0207
    1266:	c2 17       	cp	r28, r18
    1268:	d3 07       	cpc	r29, r19
    126a:	08 f0       	brcs	.+2      	; 0x126e <main+0x9a4>
    126c:	64 c0       	rjmp	.+200    	; 0x1336 <main+0xa6c>
    126e:	80 91 04 02 	lds	r24, 0x0204
    1272:	90 91 05 02 	lds	r25, 0x0205
    1276:	80 17       	cp	r24, r16
    1278:	91 07       	cpc	r25, r17
    127a:	08 f0       	brcs	.+2      	; 0x127e <main+0x9b4>
    127c:	5c c0       	rjmp	.+184    	; 0x1336 <main+0xa6c>
    127e:	e2 16       	cp	r14, r18
    1280:	f3 06       	cpc	r15, r19
    1282:	08 f0       	brcs	.+2      	; 0x1286 <main+0x9bc>
    1284:	58 c0       	rjmp	.+176    	; 0x1336 <main+0xa6c>
			{
				prox_value1 = ADC_Conversion(9);
    1286:	89 e0       	ldi	r24, 0x09	; 9
    1288:	74 d9       	rcall	.-3352   	; 0x572 <ADC_Conversion>
    128a:	80 93 11 02 	sts	0x0211, r24
				prox = Sharp_GP2D12_estimation(prox_value1);
    128e:	8c d9       	rcall	.-3304   	; 0x5a8 <Sharp_GP2D12_estimation>
    1290:	90 93 01 02 	sts	0x0201, r25
    1294:	80 93 00 02 	sts	0x0200, r24
				lcd_print(2,14,prox,3);
    1298:	23 e0       	ldi	r18, 0x03	; 3
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	ac 01       	movw	r20, r24
    129e:	6e e0       	ldi	r22, 0x0E	; 14
    12a0:	82 e0       	ldi	r24, 0x02	; 2
    12a2:	4d d8       	rcall	.-3942   	; 0x33e <lcd_print>
				
				if(prox > 100)
    12a4:	80 91 00 02 	lds	r24, 0x0200
    12a8:	90 91 01 02 	lds	r25, 0x0201
    12ac:	85 36       	cpi	r24, 0x65	; 101
    12ae:	91 05       	cpc	r25, r1
    12b0:	30 f0       	brcs	.+12     	; 0x12be <main+0x9f4>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    12b2:	f5 01       	movw	r30, r10
    12b4:	90 82       	st	Z, r9
	OCR5BL = (unsigned char)right_motor;
    12b6:	f6 01       	movw	r30, r12
    12b8:	90 82       	st	Z, r9
				{	velocity(100,100);
					forward();
    12ba:	bb d9       	rcall	.-3210   	; 0x632 <forward>
    12bc:	3c c0       	rjmp	.+120    	; 0x1336 <main+0xa6c>
				}
				
				else if(prox > 90 && prox < 99)
    12be:	9c 01       	movw	r18, r24
    12c0:	2b 55       	subi	r18, 0x5B	; 91
    12c2:	31 09       	sbc	r19, r1
    12c4:	28 30       	cpi	r18, 0x08	; 8
    12c6:	31 05       	cpc	r19, r1
    12c8:	90 f5       	brcc	.+100    	; 0x132e <main+0xa64>
				{
					stop();
    12ca:	b6 d9       	rcall	.-3220   	; 0x638 <stop>
    12cc:	ff ef       	ldi	r31, 0xFF	; 255
    12ce:	2f ef       	ldi	r18, 0xFF	; 255
    12d0:	3c e2       	ldi	r19, 0x2C	; 44
    12d2:	f1 50       	subi	r31, 0x01	; 1
    12d4:	20 40       	sbci	r18, 0x00	; 0
    12d6:	30 40       	sbci	r19, 0x00	; 0
    12d8:	e1 f7       	brne	.-8      	; 0x12d2 <main+0xa08>
    12da:	00 c0       	rjmp	.+0      	; 0x12dc <main+0xa12>
    12dc:	00 00       	nop
					_delay_ms(1000);
					
					down_pick_up();
    12de:	11 da       	rcall	.-3038   	; 0x702 <down_pick_up>
    12e0:	4f ef       	ldi	r20, 0xFF	; 255
    12e2:	8f ef       	ldi	r24, 0xFF	; 255
    12e4:	9c e2       	ldi	r25, 0x2C	; 44
    12e6:	41 50       	subi	r20, 0x01	; 1
    12e8:	80 40       	sbci	r24, 0x00	; 0
    12ea:	90 40       	sbci	r25, 0x00	; 0
    12ec:	e1 f7       	brne	.-8      	; 0x12e6 <main+0xa1c>
    12ee:	00 c0       	rjmp	.+0      	; 0x12f0 <main+0xa26>
    12f0:	00 00       	nop
					_delay_ms(1000);
					
					stop();
    12f2:	a2 d9       	rcall	.-3260   	; 0x638 <stop>
    12f4:	ef ef       	ldi	r30, 0xFF	; 255
    12f6:	ff ef       	ldi	r31, 0xFF	; 255
    12f8:	2c e2       	ldi	r18, 0x2C	; 44
    12fa:	e1 50       	subi	r30, 0x01	; 1
    12fc:	f0 40       	sbci	r31, 0x00	; 0
    12fe:	20 40       	sbci	r18, 0x00	; 0
    1300:	e1 f7       	brne	.-8      	; 0x12fa <main+0xa30>
    1302:	00 c0       	rjmp	.+0      	; 0x1304 <main+0xa3a>
    1304:	00 00       	nop
					_delay_ms(1000);
					
					back();
    1306:	a1 d9       	rcall	.-3262   	; 0x64a <back>
    1308:	3f ef       	ldi	r19, 0xFF	; 255
    130a:	4f e3       	ldi	r20, 0x3F	; 63
    130c:	8b e0       	ldi	r24, 0x0B	; 11
    130e:	31 50       	subi	r19, 0x01	; 1
    1310:	40 40       	sbci	r20, 0x00	; 0
    1312:	80 40       	sbci	r24, 0x00	; 0
    1314:	e1 f7       	brne	.-8      	; 0x130e <main+0xa44>
    1316:	00 c0       	rjmp	.+0      	; 0x1318 <main+0xa4e>
    1318:	00 00       	nop
					_delay_ms(250);
					n++;
    131a:	80 91 02 02 	lds	r24, 0x0202
    131e:	90 91 03 02 	lds	r25, 0x0203
    1322:	01 96       	adiw	r24, 0x01	; 1
    1324:	90 93 03 02 	sts	0x0203, r25
    1328:	80 93 02 02 	sts	0x0202, r24
    132c:	04 c0       	rjmp	.+8      	; 0x1336 <main+0xa6c>
				}
				else if(prox< 89)
    132e:	89 35       	cpi	r24, 0x59	; 89
    1330:	91 05       	cpc	r25, r1
    1332:	08 f4       	brcc	.+2      	; 0x1336 <main+0xa6c>
				{
					back();
    1334:	8a d9       	rcall	.-3308   	; 0x64a <back>
			}
			
		}
		

		while(n==14)
    1336:	80 91 02 02 	lds	r24, 0x0202
    133a:	90 91 03 02 	lds	r25, 0x0203
    133e:	0e 97       	sbiw	r24, 0x0e	; 14
    1340:	09 f4       	brne	.+2      	; 0x1344 <main+0xa7a>
    1342:	5d cf       	rjmp	.-326    	; 0x11fe <main+0x934>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1344:	08 e2       	ldi	r16, 0x28	; 40
    1346:	11 e0       	ldi	r17, 0x01	; 1
    1348:	0f 2e       	mov	r0, r31
    134a:	f6 e9       	ldi	r31, 0x96	; 150
    134c:	ff 2e       	mov	r15, r31
    134e:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
    1350:	ca e2       	ldi	r28, 0x2A	; 42
    1352:	d1 e0       	ldi	r29, 0x01	; 1
    1354:	44 c0       	rjmp	.+136    	; 0x13de <main+0xb14>
			}			
		}
		
		while(n==15)
		{
			unsigned int left_sensor=ADC_Conversion(1);
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	0c d9       	rcall	.-3560   	; 0x572 <ADC_Conversion>
    135a:	e8 2e       	mov	r14, r24
			unsigned int right_sensor=ADC_Conversion(3);
    135c:	83 e0       	ldi	r24, 0x03	; 3
    135e:	09 d9       	rcall	.-3566   	; 0x572 <ADC_Conversion>
    1360:	c8 2e       	mov	r12, r24
			unsigned int centre_sensor=ADC_Conversion(2);
    1362:	82 e0       	ldi	r24, 0x02	; 2
    1364:	06 d9       	rcall	.-3572   	; 0x572 <ADC_Conversion>
    1366:	d8 2e       	mov	r13, r24
			
			back_behav();
    1368:	52 da       	rcall	.-2908   	; 0x80e <back_behav>
			
			if(left_sensor> x && centre_sensor> y && right_sensor> x)
    136a:	20 91 06 02 	lds	r18, 0x0206
    136e:	30 91 07 02 	lds	r19, 0x0207
			}			
		}
		
		while(n==15)
		{
			unsigned int left_sensor=ADC_Conversion(1);
    1372:	4e 2d       	mov	r20, r14
    1374:	50 e0       	ldi	r21, 0x00	; 0
			unsigned int right_sensor=ADC_Conversion(3);
			unsigned int centre_sensor=ADC_Conversion(2);
			
			back_behav();
			
			if(left_sensor> x && centre_sensor> y && right_sensor> x)
    1376:	24 17       	cp	r18, r20
    1378:	35 07       	cpc	r19, r21
    137a:	88 f5       	brcc	.+98     	; 0x13de <main+0xb14>
		
		while(n==15)
		{
			unsigned int left_sensor=ADC_Conversion(1);
			unsigned int right_sensor=ADC_Conversion(3);
			unsigned int centre_sensor=ADC_Conversion(2);
    137c:	6d 2d       	mov	r22, r13
    137e:	70 e0       	ldi	r23, 0x00	; 0
			
			back_behav();
			
			if(left_sensor> x && centre_sensor> y && right_sensor> x)
    1380:	40 91 04 02 	lds	r20, 0x0204
    1384:	50 91 05 02 	lds	r21, 0x0205
    1388:	46 17       	cp	r20, r22
    138a:	57 07       	cpc	r21, r23
    138c:	40 f5       	brcc	.+80     	; 0x13de <main+0xb14>
		}
		
		while(n==15)
		{
			unsigned int left_sensor=ADC_Conversion(1);
			unsigned int right_sensor=ADC_Conversion(3);
    138e:	8c 2d       	mov	r24, r12
    1390:	90 e0       	ldi	r25, 0x00	; 0
			unsigned int centre_sensor=ADC_Conversion(2);
			
			back_behav();
			
			if(left_sensor> x && centre_sensor> y && right_sensor> x)
    1392:	28 17       	cp	r18, r24
    1394:	39 07       	cpc	r19, r25
    1396:	18 f5       	brcc	.+70     	; 0x13de <main+0xb14>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1398:	f8 01       	movw	r30, r16
    139a:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
    139c:	f8 82       	st	Y, r15
			{
				velocity(150,150);
				forward();
    139e:	49 d9       	rcall	.-3438   	; 0x632 <forward>
    13a0:	ff ef       	ldi	r31, 0xFF	; 255
    13a2:	2f e7       	ldi	r18, 0x7F	; 127
    13a4:	36 e1       	ldi	r19, 0x16	; 22
    13a6:	f1 50       	subi	r31, 0x01	; 1
    13a8:	20 40       	sbci	r18, 0x00	; 0
    13aa:	30 40       	sbci	r19, 0x00	; 0
    13ac:	e1 f7       	brne	.-8      	; 0x13a6 <main+0xadc>
    13ae:	00 c0       	rjmp	.+0      	; 0x13b0 <main+0xae6>
    13b0:	00 00       	nop
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    13b2:	f8 01       	movw	r30, r16
    13b4:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
    13b6:	f8 82       	st	Y, r15
				_delay_ms(500);
				
				velocity(150,150);
				left();
    13b8:	42 d9       	rcall	.-3452   	; 0x63e <left>
    13ba:	ff ef       	ldi	r31, 0xFF	; 255
    13bc:	2f e7       	ldi	r18, 0x7F	; 127
    13be:	3d e0       	ldi	r19, 0x0D	; 13
    13c0:	f1 50       	subi	r31, 0x01	; 1
    13c2:	20 40       	sbci	r18, 0x00	; 0
    13c4:	30 40       	sbci	r19, 0x00	; 0
    13c6:	e1 f7       	brne	.-8      	; 0x13c0 <main+0xaf6>
    13c8:	00 c0       	rjmp	.+0      	; 0x13ca <main+0xb00>
    13ca:	00 00       	nop
				_delay_ms(300);
				
				n++;
    13cc:	80 91 02 02 	lds	r24, 0x0202
    13d0:	90 91 03 02 	lds	r25, 0x0203
    13d4:	01 96       	adiw	r24, 0x01	; 1
    13d6:	90 93 03 02 	sts	0x0203, r25
    13da:	80 93 02 02 	sts	0x0202, r24
				}
				
			}			
		}
		
		while(n==15)
    13de:	80 91 02 02 	lds	r24, 0x0202
    13e2:	90 91 03 02 	lds	r25, 0x0203
    13e6:	0f 97       	sbiw	r24, 0x0f	; 15
    13e8:	09 f4       	brne	.+2      	; 0x13ec <main+0xb22>
    13ea:	b5 cf       	rjmp	.-150    	; 0x1356 <main+0xa8c>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    13ec:	08 e2       	ldi	r16, 0x28	; 40
    13ee:	11 e0       	ldi	r17, 0x01	; 1
    13f0:	0f 2e       	mov	r0, r31
    13f2:	f6 e9       	ldi	r31, 0x96	; 150
    13f4:	ff 2e       	mov	r15, r31
    13f6:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
    13f8:	ca e2       	ldi	r28, 0x2A	; 42
    13fa:	d1 e0       	ldi	r29, 0x01	; 1
    13fc:	44 c0       	rjmp	.+136    	; 0x1486 <main+0xbbc>
			}
		}
		
		while(n==16)
		{
			unsigned int left_sensor=ADC_Conversion(1);
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	b8 d8       	rcall	.-3728   	; 0x572 <ADC_Conversion>
    1402:	e8 2e       	mov	r14, r24
			unsigned int right_sensor=ADC_Conversion(3);
    1404:	83 e0       	ldi	r24, 0x03	; 3
    1406:	b5 d8       	rcall	.-3734   	; 0x572 <ADC_Conversion>
    1408:	c8 2e       	mov	r12, r24
			unsigned int centre_sensor=ADC_Conversion(2);
    140a:	82 e0       	ldi	r24, 0x02	; 2
    140c:	b2 d8       	rcall	.-3740   	; 0x572 <ADC_Conversion>
    140e:	d8 2e       	mov	r13, r24
			
			natural_behav();
    1410:	a0 d9       	rcall	.-3264   	; 0x752 <natural_behav>
			
			if(left_sensor> x && centre_sensor> y && right_sensor> x)
    1412:	20 91 06 02 	lds	r18, 0x0206
    1416:	30 91 07 02 	lds	r19, 0x0207
			}
		}
		
		while(n==16)
		{
			unsigned int left_sensor=ADC_Conversion(1);
    141a:	4e 2d       	mov	r20, r14
    141c:	50 e0       	ldi	r21, 0x00	; 0
			unsigned int right_sensor=ADC_Conversion(3);
			unsigned int centre_sensor=ADC_Conversion(2);
			
			natural_behav();
			
			if(left_sensor> x && centre_sensor> y && right_sensor> x)
    141e:	24 17       	cp	r18, r20
    1420:	35 07       	cpc	r19, r21
    1422:	88 f5       	brcc	.+98     	; 0x1486 <main+0xbbc>
		
		while(n==16)
		{
			unsigned int left_sensor=ADC_Conversion(1);
			unsigned int right_sensor=ADC_Conversion(3);
			unsigned int centre_sensor=ADC_Conversion(2);
    1424:	6d 2d       	mov	r22, r13
    1426:	70 e0       	ldi	r23, 0x00	; 0
			
			natural_behav();
			
			if(left_sensor> x && centre_sensor> y && right_sensor> x)
    1428:	40 91 04 02 	lds	r20, 0x0204
    142c:	50 91 05 02 	lds	r21, 0x0205
    1430:	46 17       	cp	r20, r22
    1432:	57 07       	cpc	r21, r23
    1434:	40 f5       	brcc	.+80     	; 0x1486 <main+0xbbc>
		}
		
		while(n==16)
		{
			unsigned int left_sensor=ADC_Conversion(1);
			unsigned int right_sensor=ADC_Conversion(3);
    1436:	8c 2d       	mov	r24, r12
    1438:	90 e0       	ldi	r25, 0x00	; 0
			unsigned int centre_sensor=ADC_Conversion(2);
			
			natural_behav();
			
			if(left_sensor> x && centre_sensor> y && right_sensor> x)
    143a:	28 17       	cp	r18, r24
    143c:	39 07       	cpc	r19, r25
    143e:	18 f5       	brcc	.+70     	; 0x1486 <main+0xbbc>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1440:	f8 01       	movw	r30, r16
    1442:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
    1444:	f8 82       	st	Y, r15
			{
				velocity(150,150);
				forward();
    1446:	f5 d8       	rcall	.-3606   	; 0x632 <forward>
    1448:	ff ef       	ldi	r31, 0xFF	; 255
    144a:	2f eb       	ldi	r18, 0xBF	; 191
    144c:	3f e0       	ldi	r19, 0x0F	; 15
    144e:	f1 50       	subi	r31, 0x01	; 1
    1450:	20 40       	sbci	r18, 0x00	; 0
    1452:	30 40       	sbci	r19, 0x00	; 0
    1454:	e1 f7       	brne	.-8      	; 0x144e <main+0xb84>
    1456:	00 c0       	rjmp	.+0      	; 0x1458 <main+0xb8e>
    1458:	00 00       	nop
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    145a:	f8 01       	movw	r30, r16
    145c:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
    145e:	f8 82       	st	Y, r15
				_delay_ms(350);
				
				velocity(150,150);
				left();
    1460:	ee d8       	rcall	.-3620   	; 0x63e <left>
    1462:	ff ef       	ldi	r31, 0xFF	; 255
    1464:	2f ef       	ldi	r18, 0xFF	; 255
    1466:	33 e2       	ldi	r19, 0x23	; 35
    1468:	f1 50       	subi	r31, 0x01	; 1
    146a:	20 40       	sbci	r18, 0x00	; 0
    146c:	30 40       	sbci	r19, 0x00	; 0
    146e:	e1 f7       	brne	.-8      	; 0x1468 <main+0xb9e>
    1470:	00 c0       	rjmp	.+0      	; 0x1472 <main+0xba8>
    1472:	00 00       	nop
				_delay_ms(800);
				
				n++;
    1474:	80 91 02 02 	lds	r24, 0x0202
    1478:	90 91 03 02 	lds	r25, 0x0203
    147c:	01 96       	adiw	r24, 0x01	; 1
    147e:	90 93 03 02 	sts	0x0203, r25
    1482:	80 93 02 02 	sts	0x0202, r24
				
				n++;
			}
		}
		
		while(n==16)
    1486:	80 91 02 02 	lds	r24, 0x0202
    148a:	90 91 03 02 	lds	r25, 0x0203
    148e:	40 97       	sbiw	r24, 0x10	; 16
    1490:	09 f4       	brne	.+2      	; 0x1494 <main+0xbca>
    1492:	b5 cf       	rjmp	.-150    	; 0x13fe <main+0xb34>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1494:	0f 2e       	mov	r0, r31
    1496:	f8 e2       	ldi	r31, 0x28	; 40
    1498:	af 2e       	mov	r10, r31
    149a:	bb 24       	eor	r11, r11
    149c:	b3 94       	inc	r11
    149e:	f0 2d       	mov	r31, r0
    14a0:	0f 2e       	mov	r0, r31
    14a2:	f2 e8       	ldi	r31, 0x82	; 130
    14a4:	9f 2e       	mov	r9, r31
    14a6:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
    14a8:	0f 2e       	mov	r0, r31
    14aa:	fa e2       	ldi	r31, 0x2A	; 42
    14ac:	cf 2e       	mov	r12, r31
    14ae:	dd 24       	eor	r13, r13
    14b0:	d3 94       	inc	r13
    14b2:	f0 2d       	mov	r31, r0
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    14b4:	0f 2e       	mov	r0, r31
    14b6:	f6 e9       	ldi	r31, 0x96	; 150
    14b8:	8f 2e       	mov	r8, r31
    14ba:	f0 2d       	mov	r31, r0
    14bc:	0f 2e       	mov	r0, r31
    14be:	f7 e8       	ldi	r31, 0x87	; 135
    14c0:	5f 2e       	mov	r5, r31
    14c2:	f0 2d       	mov	r31, r0
    14c4:	0f 2e       	mov	r0, r31
    14c6:	fd e7       	ldi	r31, 0x7D	; 125
    14c8:	7f 2e       	mov	r7, r31
    14ca:	f0 2d       	mov	r31, r0
    14cc:	0f 2e       	mov	r0, r31
    14ce:	f4 e6       	ldi	r31, 0x64	; 100
    14d0:	6f 2e       	mov	r6, r31
    14d2:	f0 2d       	mov	r31, r0
    14d4:	ca c0       	rjmp	.+404    	; 0x166a <main+0xda0>
		}
		
		
		while(n==17)
		{
			unsigned int left_sensor=ADC_Conversion(1);
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	4c d8       	rcall	.-3944   	; 0x572 <ADC_Conversion>
    14da:	c8 2f       	mov	r28, r24
    14dc:	d0 e0       	ldi	r29, 0x00	; 0
			 unsigned int right_sensor=ADC_Conversion(3);
    14de:	83 e0       	ldi	r24, 0x03	; 3
    14e0:	48 d8       	rcall	.-3952   	; 0x572 <ADC_Conversion>
    14e2:	e8 2e       	mov	r14, r24
    14e4:	f1 2c       	mov	r15, r1
			unsigned int centre_sensor=ADC_Conversion(2);
    14e6:	82 e0       	ldi	r24, 0x02	; 2
    14e8:	44 d8       	rcall	.-3960   	; 0x572 <ADC_Conversion>
    14ea:	08 2f       	mov	r16, r24
    14ec:	10 e0       	ldi	r17, 0x00	; 0
			
			if(centre_sensor>y && left_sensor <x && right_sensor <x)
    14ee:	80 91 04 02 	lds	r24, 0x0204
    14f2:	90 91 05 02 	lds	r25, 0x0205
    14f6:	80 17       	cp	r24, r16
    14f8:	91 07       	cpc	r25, r17
    14fa:	78 f4       	brcc	.+30     	; 0x151a <main+0xc50>
    14fc:	20 91 06 02 	lds	r18, 0x0206
    1500:	30 91 07 02 	lds	r19, 0x0207
    1504:	c2 17       	cp	r28, r18
    1506:	d3 07       	cpc	r29, r19
    1508:	f0 f4       	brcc	.+60     	; 0x1546 <main+0xc7c>
    150a:	e2 16       	cp	r14, r18
    150c:	f3 06       	cpc	r15, r19
    150e:	60 f4       	brcc	.+24     	; 0x1528 <main+0xc5e>
    1510:	f5 01       	movw	r30, r10
    1512:	80 82       	st	Z, r8
	OCR5BL = (unsigned char)right_motor;
    1514:	f6 01       	movw	r30, r12
    1516:	80 82       	st	Z, r8
			{
				velocity(150,150);
				forward();
    1518:	8c d8       	rcall	.-3816   	; 0x632 <forward>
			}
			if(left_sensor<x && centre_sensor <y && right_sensor>x)
    151a:	20 91 06 02 	lds	r18, 0x0206
    151e:	30 91 07 02 	lds	r19, 0x0207
    1522:	c2 17       	cp	r28, r18
    1524:	d3 07       	cpc	r29, r19
    1526:	78 f4       	brcc	.+30     	; 0x1546 <main+0xc7c>
    1528:	80 91 04 02 	lds	r24, 0x0204
    152c:	90 91 05 02 	lds	r25, 0x0205
    1530:	08 17       	cp	r16, r24
    1532:	19 07       	cpc	r17, r25
    1534:	40 f4       	brcc	.+16     	; 0x1546 <main+0xc7c>
    1536:	2e 15       	cp	r18, r14
    1538:	3f 05       	cpc	r19, r15
    153a:	28 f4       	brcc	.+10     	; 0x1546 <main+0xc7c>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    153c:	f5 01       	movw	r30, r10
    153e:	90 82       	st	Z, r9
	OCR5BL = (unsigned char)right_motor;
    1540:	f6 01       	movw	r30, r12
    1542:	90 82       	st	Z, r9
			{
				velocity(130,130);
				right();
    1544:	7f d8       	rcall	.-3842   	; 0x644 <right>
			}
			if(left_sensor>x && centre_sensor <y && right_sensor<x)
    1546:	80 91 06 02 	lds	r24, 0x0206
    154a:	90 91 07 02 	lds	r25, 0x0207
    154e:	8c 17       	cp	r24, r28
    1550:	9d 07       	cpc	r25, r29
    1552:	78 f4       	brcc	.+30     	; 0x1572 <main+0xca8>
    1554:	20 91 04 02 	lds	r18, 0x0204
    1558:	30 91 05 02 	lds	r19, 0x0205
    155c:	02 17       	cp	r16, r18
    155e:	13 07       	cpc	r17, r19
    1560:	40 f4       	brcc	.+16     	; 0x1572 <main+0xca8>
    1562:	e8 16       	cp	r14, r24
    1564:	f9 06       	cpc	r15, r25
    1566:	28 f4       	brcc	.+10     	; 0x1572 <main+0xca8>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1568:	f5 01       	movw	r30, r10
    156a:	90 82       	st	Z, r9
	OCR5BL = (unsigned char)right_motor;
    156c:	f6 01       	movw	r30, r12
    156e:	90 82       	st	Z, r9
			{
				velocity(130,130);
				left();
    1570:	66 d8       	rcall	.-3892   	; 0x63e <left>
			}
			if(left_sensor<x && centre_sensor<y && right_sensor<x)
    1572:	80 91 06 02 	lds	r24, 0x0206
    1576:	90 91 07 02 	lds	r25, 0x0207
    157a:	c8 17       	cp	r28, r24
    157c:	d9 07       	cpc	r29, r25
    157e:	08 f0       	brcs	.+2      	; 0x1582 <main+0xcb8>
    1580:	4f c0       	rjmp	.+158    	; 0x1620 <main+0xd56>
    1582:	20 91 04 02 	lds	r18, 0x0204
    1586:	30 91 05 02 	lds	r19, 0x0205
    158a:	02 17       	cp	r16, r18
    158c:	13 07       	cpc	r17, r19
    158e:	08 f0       	brcs	.+2      	; 0x1592 <main+0xcc8>
    1590:	47 c0       	rjmp	.+142    	; 0x1620 <main+0xd56>
    1592:	e8 16       	cp	r14, r24
    1594:	f9 06       	cpc	r15, r25
    1596:	08 f0       	brcs	.+2      	; 0x159a <main+0xcd0>
    1598:	43 c0       	rjmp	.+134    	; 0x1620 <main+0xd56>
			{
				prox_value2 = ADC_Conversion(10);
    159a:	8a e0       	ldi	r24, 0x0A	; 10
    159c:	0e 94 b9 02 	call	0x572	; 0x572 <ADC_Conversion>
    15a0:	80 93 10 02 	sts	0x0210, r24
				prox2 = Sharp_GP2D12_estimation(prox_value2);
    15a4:	01 d8       	rcall	.-4094   	; 0x5a8 <Sharp_GP2D12_estimation>
    15a6:	90 93 0f 02 	sts	0x020F, r25
    15aa:	80 93 0e 02 	sts	0x020E, r24
				lcd_print(1,14,prox2,3);
    15ae:	23 e0       	ldi	r18, 0x03	; 3
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	ac 01       	movw	r20, r24
    15b4:	6e e0       	ldi	r22, 0x0E	; 14
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	0e 94 9f 01 	call	0x33e	; 0x33e <lcd_print>
				
				if(prox2 > 600 )
    15bc:	80 91 0e 02 	lds	r24, 0x020E
    15c0:	90 91 0f 02 	lds	r25, 0x020F
    15c4:	89 35       	cpi	r24, 0x59	; 89
    15c6:	92 40       	sbci	r25, 0x02	; 2
    15c8:	28 f0       	brcs	.+10     	; 0x15d4 <main+0xd0a>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    15ca:	f5 01       	movw	r30, r10
    15cc:	60 82       	st	Z, r6
	OCR5BL = (unsigned char)right_motor;
    15ce:	f6 01       	movw	r30, r12
    15d0:	60 82       	st	Z, r6
				{
					velocity(100,100);
					forward();
    15d2:	2f d8       	rcall	.-4002   	; 0x632 <forward>
				}				
				if(prox2 > 124 && prox < 600)
    15d4:	80 91 0e 02 	lds	r24, 0x020E
    15d8:	90 91 0f 02 	lds	r25, 0x020F
    15dc:	8d 37       	cpi	r24, 0x7D	; 125
    15de:	91 05       	cpc	r25, r1
    15e0:	68 f0       	brcs	.+26     	; 0x15fc <main+0xd32>
    15e2:	20 91 00 02 	lds	r18, 0x0200
    15e6:	30 91 01 02 	lds	r19, 0x0201
    15ea:	28 35       	cpi	r18, 0x58	; 88
    15ec:	32 40       	sbci	r19, 0x02	; 2
    15ee:	30 f4       	brcc	.+12     	; 0x15fc <main+0xd32>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    15f0:	f5 01       	movw	r30, r10
    15f2:	70 82       	st	Z, r7
	OCR5BL = (unsigned char)right_motor;
    15f4:	f6 01       	movw	r30, r12
    15f6:	70 82       	st	Z, r7
				{
					velocity(125,125);
					soft_right();
    15f8:	2e d8       	rcall	.-4004   	; 0x656 <soft_right>
    15fa:	12 c0       	rjmp	.+36     	; 0x1620 <main+0xd56>
				}
				else if(prox2 < 121 )
    15fc:	89 37       	cpi	r24, 0x79	; 121
    15fe:	91 05       	cpc	r25, r1
    1600:	30 f4       	brcc	.+12     	; 0x160e <main+0xd44>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1602:	f5 01       	movw	r30, r10
    1604:	70 82       	st	Z, r7
	OCR5BL = (unsigned char)right_motor;
    1606:	f6 01       	movw	r30, r12
    1608:	70 82       	st	Z, r7
				{
					velocity(125,125);
					soft_left();
    160a:	22 d8       	rcall	.-4028   	; 0x650 <soft_left>
    160c:	09 c0       	rjmp	.+18     	; 0x1620 <main+0xd56>
				}
				else if(prox2 > 119  && prox2 < 126 )
    160e:	88 57       	subi	r24, 0x78	; 120
    1610:	91 09       	sbc	r25, r1
    1612:	06 97       	sbiw	r24, 0x06	; 6
    1614:	28 f4       	brcc	.+10     	; 0x1620 <main+0xd56>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1616:	f5 01       	movw	r30, r10
    1618:	50 82       	st	Z, r5
	OCR5BL = (unsigned char)right_motor;
    161a:	f6 01       	movw	r30, r12
    161c:	50 82       	st	Z, r5
				{
					velocity(135,135);
					forward();
    161e:	09 d8       	rcall	.-4078   	; 0x632 <forward>
				}
				
			}
			if (left_sensor>x && centre_sensor >y && right_sensor>x)
    1620:	80 91 06 02 	lds	r24, 0x0206
    1624:	90 91 07 02 	lds	r25, 0x0207
    1628:	8c 17       	cp	r24, r28
    162a:	9d 07       	cpc	r25, r29
    162c:	f0 f4       	brcc	.+60     	; 0x166a <main+0xda0>
    162e:	20 91 04 02 	lds	r18, 0x0204
    1632:	30 91 05 02 	lds	r19, 0x0205
    1636:	20 17       	cp	r18, r16
    1638:	31 07       	cpc	r19, r17
    163a:	b8 f4       	brcc	.+46     	; 0x166a <main+0xda0>
    163c:	8e 15       	cp	r24, r14
    163e:	9f 05       	cpc	r25, r15
    1640:	a0 f4       	brcc	.+40     	; 0x166a <main+0xda0>
			{
				forward();
    1642:	0e 94 19 03 	call	0x632	; 0x632 <forward>
    1646:	ff ef       	ldi	r31, 0xFF	; 255
    1648:	2f ef       	ldi	r18, 0xFF	; 255
    164a:	38 e0       	ldi	r19, 0x08	; 8
    164c:	f1 50       	subi	r31, 0x01	; 1
    164e:	20 40       	sbci	r18, 0x00	; 0
    1650:	30 40       	sbci	r19, 0x00	; 0
    1652:	e1 f7       	brne	.-8      	; 0x164c <main+0xd82>
    1654:	00 c0       	rjmp	.+0      	; 0x1656 <main+0xd8c>
    1656:	00 00       	nop
				_delay_ms(200);
				n++;
    1658:	80 91 02 02 	lds	r24, 0x0202
    165c:	90 91 03 02 	lds	r25, 0x0203
    1660:	01 96       	adiw	r24, 0x01	; 1
    1662:	90 93 03 02 	sts	0x0203, r25
    1666:	80 93 02 02 	sts	0x0202, r24
				n++;
			}
		}
		
		
		while(n==17)
    166a:	80 91 02 02 	lds	r24, 0x0202
    166e:	90 91 03 02 	lds	r25, 0x0203
    1672:	41 97       	sbiw	r24, 0x11	; 17
    1674:	09 f4       	brne	.+2      	; 0x1678 <main+0xdae>
    1676:	2f cf       	rjmp	.-418    	; 0x14d6 <main+0xc0c>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1678:	08 e2       	ldi	r16, 0x28	; 40
    167a:	11 e0       	ldi	r17, 0x01	; 1
    167c:	0f 2e       	mov	r0, r31
    167e:	f0 e5       	ldi	r31, 0x50	; 80
    1680:	ff 2e       	mov	r15, r31
    1682:	f0 2d       	mov	r31, r0
	OCR5BL = (unsigned char)right_motor;
    1684:	ca e2       	ldi	r28, 0x2A	; 42
    1686:	d1 e0       	ldi	r29, 0x01	; 1
    1688:	42 c0       	rjmp	.+132    	; 0x170e <main+0xe44>
			
		}
		
		while(n == 18)
		{
			unsigned int left_sensor=ADC_Conversion(1);
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	0e 94 b9 02 	call	0x572	; 0x572 <ADC_Conversion>
			unsigned int right_sensor=ADC_Conversion(3);
    1690:	83 e0       	ldi	r24, 0x03	; 3
    1692:	0e 94 b9 02 	call	0x572	; 0x572 <ADC_Conversion>
			unsigned int centre_sensor=ADC_Conversion(2);
    1696:	82 e0       	ldi	r24, 0x02	; 2
    1698:	0e 94 b9 02 	call	0x572	; 0x572 <ADC_Conversion>
			prox_value1 = ADC_Conversion(9);
    169c:	89 e0       	ldi	r24, 0x09	; 9
    169e:	0e 94 b9 02 	call	0x572	; 0x572 <ADC_Conversion>
    16a2:	80 93 11 02 	sts	0x0211, r24
			prox = Sharp_GP2D12_estimation(prox_value1);
    16a6:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <Sharp_GP2D12_estimation>
    16aa:	90 93 01 02 	sts	0x0201, r25
    16ae:	80 93 00 02 	sts	0x0200, r24
			lcd_print(2,14,prox,3);
    16b2:	23 e0       	ldi	r18, 0x03	; 3
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	ac 01       	movw	r20, r24
    16b8:	6e e0       	ldi	r22, 0x0E	; 14
    16ba:	82 e0       	ldi	r24, 0x02	; 2
    16bc:	0e 94 9f 01 	call	0x33e	; 0x33e <lcd_print>
		
		
			if(prox >81 && prox <83)
    16c0:	80 91 00 02 	lds	r24, 0x0200
    16c4:	90 91 01 02 	lds	r25, 0x0201
    16c8:	82 35       	cpi	r24, 0x52	; 82
    16ca:	91 05       	cpc	r25, r1
    16cc:	c1 f4       	brne	.+48     	; 0x16fe <main+0xe34>
			{
				place();
    16ce:	3b d8       	rcall	.-3978   	; 0x746 <place>
				stop();
    16d0:	0e 94 1c 03 	call	0x638	; 0x638 <stop>
    16d4:	4f ef       	ldi	r20, 0xFF	; 255
    16d6:	8f ef       	ldi	r24, 0xFF	; 255
    16d8:	96 e7       	ldi	r25, 0x76	; 118
    16da:	e1 e0       	ldi	r30, 0x01	; 1
    16dc:	41 50       	subi	r20, 0x01	; 1
    16de:	80 40       	sbci	r24, 0x00	; 0
    16e0:	90 40       	sbci	r25, 0x00	; 0
    16e2:	e0 40       	sbci	r30, 0x00	; 0
    16e4:	d9 f7       	brne	.-10     	; 0x16dc <main+0xe12>
    16e6:	00 c0       	rjmp	.+0      	; 0x16e8 <main+0xe1e>
    16e8:	00 00       	nop
				_delay_ms(10000);
				
				n++;
    16ea:	80 91 02 02 	lds	r24, 0x0202
    16ee:	90 91 03 02 	lds	r25, 0x0203
    16f2:	01 96       	adiw	r24, 0x01	; 1
    16f4:	90 93 03 02 	sts	0x0203, r25
    16f8:	80 93 02 02 	sts	0x0202, r24
    16fc:	08 c0       	rjmp	.+16     	; 0x170e <main+0xe44>
			}
			else if (prox >84)
    16fe:	85 35       	cpi	r24, 0x55	; 85
    1700:	91 05       	cpc	r25, r1
    1702:	28 f0       	brcs	.+10     	; 0x170e <main+0xe44>
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
}

void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    1704:	f8 01       	movw	r30, r16
    1706:	f0 82       	st	Z, r15
	OCR5BL = (unsigned char)right_motor;
    1708:	f8 82       	st	Y, r15
			{	
				velocity(80,80);
				forward();
    170a:	0e 94 19 03 	call	0x632	; 0x632 <forward>
				n++;
			}
			
		}
		
		while(n == 18)
    170e:	80 91 02 02 	lds	r24, 0x0202
    1712:	90 91 03 02 	lds	r25, 0x0203
    1716:	82 31       	cpi	r24, 0x12	; 18
    1718:	91 05       	cpc	r25, r1
    171a:	09 f4       	brne	.+2      	; 0x171e <main+0xe54>
    171c:	b6 cf       	rjmp	.-148    	; 0x168a <main+0xdc0>
				forward();
			}
		
		}
		
		while(n == 19)
    171e:	43 97       	sbiw	r24, 0x13	; 19
    1720:	b1 f4       	brne	.+44     	; 0x174e <main+0xe84>
		{
				buzzer_on();
    1722:	0e 94 96 02 	call	0x52c	; 0x52c <buzzer_on>
    1726:	ff ef       	ldi	r31, 0xFF	; 255
    1728:	2f ef       	ldi	r18, 0xFF	; 255
    172a:	30 ee       	ldi	r19, 0xE0	; 224
    172c:	f1 50       	subi	r31, 0x01	; 1
    172e:	20 40       	sbci	r18, 0x00	; 0
    1730:	30 40       	sbci	r19, 0x00	; 0
    1732:	e1 f7       	brne	.-8      	; 0x172c <main+0xe62>
    1734:	00 c0       	rjmp	.+0      	; 0x1736 <main+0xe6c>
    1736:	00 00       	nop
				_delay_ms(5000);
				n++;
    1738:	80 91 02 02 	lds	r24, 0x0202
    173c:	90 91 03 02 	lds	r25, 0x0203
    1740:	01 96       	adiw	r24, 0x01	; 1
    1742:	90 93 03 02 	sts	0x0203, r25
    1746:	80 93 02 02 	sts	0x0202, r24
				forward();
			}
		
		}
		
		while(n == 19)
    174a:	43 97       	sbiw	r24, 0x13	; 19
    174c:	51 f3       	breq	.-44     	; 0x1722 <main+0xe58>
		{
				buzzer_on();
				_delay_ms(5000);
				n++;
		}
	}
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	1f 91       	pop	r17
    1758:	0f 91       	pop	r16
    175a:	ff 90       	pop	r15
    175c:	ef 90       	pop	r14
    175e:	df 90       	pop	r13
    1760:	cf 90       	pop	r12
    1762:	bf 90       	pop	r11
    1764:	af 90       	pop	r10
    1766:	9f 90       	pop	r9
    1768:	8f 90       	pop	r8
    176a:	7f 90       	pop	r7
    176c:	6f 90       	pop	r6
    176e:	5f 90       	pop	r5
    1770:	08 95       	ret

00001772 <__subsf3>:
    1772:	50 58       	subi	r21, 0x80	; 128

00001774 <__addsf3>:
    1774:	bb 27       	eor	r27, r27
    1776:	aa 27       	eor	r26, r26
    1778:	0e d0       	rcall	.+28     	; 0x1796 <__addsf3x>
    177a:	4d c1       	rjmp	.+666    	; 0x1a16 <__fp_round>
    177c:	3e d1       	rcall	.+636    	; 0x19fa <__fp_pscA>
    177e:	30 f0       	brcs	.+12     	; 0x178c <__addsf3+0x18>
    1780:	43 d1       	rcall	.+646    	; 0x1a08 <__fp_pscB>
    1782:	20 f0       	brcs	.+8      	; 0x178c <__addsf3+0x18>
    1784:	31 f4       	brne	.+12     	; 0x1792 <__addsf3+0x1e>
    1786:	9f 3f       	cpi	r25, 0xFF	; 255
    1788:	11 f4       	brne	.+4      	; 0x178e <__addsf3+0x1a>
    178a:	1e f4       	brtc	.+6      	; 0x1792 <__addsf3+0x1e>
    178c:	33 c1       	rjmp	.+614    	; 0x19f4 <__fp_nan>
    178e:	0e f4       	brtc	.+2      	; 0x1792 <__addsf3+0x1e>
    1790:	e0 95       	com	r30
    1792:	e7 fb       	bst	r30, 7
    1794:	29 c1       	rjmp	.+594    	; 0x19e8 <__fp_inf>

00001796 <__addsf3x>:
    1796:	e9 2f       	mov	r30, r25
    1798:	4f d1       	rcall	.+670    	; 0x1a38 <__fp_split3>
    179a:	80 f3       	brcs	.-32     	; 0x177c <__addsf3+0x8>
    179c:	ba 17       	cp	r27, r26
    179e:	62 07       	cpc	r22, r18
    17a0:	73 07       	cpc	r23, r19
    17a2:	84 07       	cpc	r24, r20
    17a4:	95 07       	cpc	r25, r21
    17a6:	18 f0       	brcs	.+6      	; 0x17ae <__addsf3x+0x18>
    17a8:	71 f4       	brne	.+28     	; 0x17c6 <__addsf3x+0x30>
    17aa:	9e f5       	brtc	.+102    	; 0x1812 <__addsf3x+0x7c>
    17ac:	67 c1       	rjmp	.+718    	; 0x1a7c <__fp_zero>
    17ae:	0e f4       	brtc	.+2      	; 0x17b2 <__addsf3x+0x1c>
    17b0:	e0 95       	com	r30
    17b2:	0b 2e       	mov	r0, r27
    17b4:	ba 2f       	mov	r27, r26
    17b6:	a0 2d       	mov	r26, r0
    17b8:	0b 01       	movw	r0, r22
    17ba:	b9 01       	movw	r22, r18
    17bc:	90 01       	movw	r18, r0
    17be:	0c 01       	movw	r0, r24
    17c0:	ca 01       	movw	r24, r20
    17c2:	a0 01       	movw	r20, r0
    17c4:	11 24       	eor	r1, r1
    17c6:	ff 27       	eor	r31, r31
    17c8:	59 1b       	sub	r21, r25
    17ca:	99 f0       	breq	.+38     	; 0x17f2 <__addsf3x+0x5c>
    17cc:	59 3f       	cpi	r21, 0xF9	; 249
    17ce:	50 f4       	brcc	.+20     	; 0x17e4 <__addsf3x+0x4e>
    17d0:	50 3e       	cpi	r21, 0xE0	; 224
    17d2:	68 f1       	brcs	.+90     	; 0x182e <__addsf3x+0x98>
    17d4:	1a 16       	cp	r1, r26
    17d6:	f0 40       	sbci	r31, 0x00	; 0
    17d8:	a2 2f       	mov	r26, r18
    17da:	23 2f       	mov	r18, r19
    17dc:	34 2f       	mov	r19, r20
    17de:	44 27       	eor	r20, r20
    17e0:	58 5f       	subi	r21, 0xF8	; 248
    17e2:	f3 cf       	rjmp	.-26     	; 0x17ca <__addsf3x+0x34>
    17e4:	46 95       	lsr	r20
    17e6:	37 95       	ror	r19
    17e8:	27 95       	ror	r18
    17ea:	a7 95       	ror	r26
    17ec:	f0 40       	sbci	r31, 0x00	; 0
    17ee:	53 95       	inc	r21
    17f0:	c9 f7       	brne	.-14     	; 0x17e4 <__addsf3x+0x4e>
    17f2:	7e f4       	brtc	.+30     	; 0x1812 <__addsf3x+0x7c>
    17f4:	1f 16       	cp	r1, r31
    17f6:	ba 0b       	sbc	r27, r26
    17f8:	62 0b       	sbc	r22, r18
    17fa:	73 0b       	sbc	r23, r19
    17fc:	84 0b       	sbc	r24, r20
    17fe:	ba f0       	brmi	.+46     	; 0x182e <__addsf3x+0x98>
    1800:	91 50       	subi	r25, 0x01	; 1
    1802:	a1 f0       	breq	.+40     	; 0x182c <__addsf3x+0x96>
    1804:	ff 0f       	add	r31, r31
    1806:	bb 1f       	adc	r27, r27
    1808:	66 1f       	adc	r22, r22
    180a:	77 1f       	adc	r23, r23
    180c:	88 1f       	adc	r24, r24
    180e:	c2 f7       	brpl	.-16     	; 0x1800 <__addsf3x+0x6a>
    1810:	0e c0       	rjmp	.+28     	; 0x182e <__addsf3x+0x98>
    1812:	ba 0f       	add	r27, r26
    1814:	62 1f       	adc	r22, r18
    1816:	73 1f       	adc	r23, r19
    1818:	84 1f       	adc	r24, r20
    181a:	48 f4       	brcc	.+18     	; 0x182e <__addsf3x+0x98>
    181c:	87 95       	ror	r24
    181e:	77 95       	ror	r23
    1820:	67 95       	ror	r22
    1822:	b7 95       	ror	r27
    1824:	f7 95       	ror	r31
    1826:	9e 3f       	cpi	r25, 0xFE	; 254
    1828:	08 f0       	brcs	.+2      	; 0x182c <__addsf3x+0x96>
    182a:	b3 cf       	rjmp	.-154    	; 0x1792 <__addsf3+0x1e>
    182c:	93 95       	inc	r25
    182e:	88 0f       	add	r24, r24
    1830:	08 f0       	brcs	.+2      	; 0x1834 <__addsf3x+0x9e>
    1832:	99 27       	eor	r25, r25
    1834:	ee 0f       	add	r30, r30
    1836:	97 95       	ror	r25
    1838:	87 95       	ror	r24
    183a:	08 95       	ret

0000183c <__divsf3>:
    183c:	0c d0       	rcall	.+24     	; 0x1856 <__divsf3x>
    183e:	eb c0       	rjmp	.+470    	; 0x1a16 <__fp_round>
    1840:	e3 d0       	rcall	.+454    	; 0x1a08 <__fp_pscB>
    1842:	40 f0       	brcs	.+16     	; 0x1854 <__divsf3+0x18>
    1844:	da d0       	rcall	.+436    	; 0x19fa <__fp_pscA>
    1846:	30 f0       	brcs	.+12     	; 0x1854 <__divsf3+0x18>
    1848:	21 f4       	brne	.+8      	; 0x1852 <__divsf3+0x16>
    184a:	5f 3f       	cpi	r21, 0xFF	; 255
    184c:	19 f0       	breq	.+6      	; 0x1854 <__divsf3+0x18>
    184e:	cc c0       	rjmp	.+408    	; 0x19e8 <__fp_inf>
    1850:	51 11       	cpse	r21, r1
    1852:	15 c1       	rjmp	.+554    	; 0x1a7e <__fp_szero>
    1854:	cf c0       	rjmp	.+414    	; 0x19f4 <__fp_nan>

00001856 <__divsf3x>:
    1856:	f0 d0       	rcall	.+480    	; 0x1a38 <__fp_split3>
    1858:	98 f3       	brcs	.-26     	; 0x1840 <__divsf3+0x4>

0000185a <__divsf3_pse>:
    185a:	99 23       	and	r25, r25
    185c:	c9 f3       	breq	.-14     	; 0x1850 <__divsf3+0x14>
    185e:	55 23       	and	r21, r21
    1860:	b1 f3       	breq	.-20     	; 0x184e <__divsf3+0x12>
    1862:	95 1b       	sub	r25, r21
    1864:	55 0b       	sbc	r21, r21
    1866:	bb 27       	eor	r27, r27
    1868:	aa 27       	eor	r26, r26
    186a:	62 17       	cp	r22, r18
    186c:	73 07       	cpc	r23, r19
    186e:	84 07       	cpc	r24, r20
    1870:	38 f0       	brcs	.+14     	; 0x1880 <__divsf3_pse+0x26>
    1872:	9f 5f       	subi	r25, 0xFF	; 255
    1874:	5f 4f       	sbci	r21, 0xFF	; 255
    1876:	22 0f       	add	r18, r18
    1878:	33 1f       	adc	r19, r19
    187a:	44 1f       	adc	r20, r20
    187c:	aa 1f       	adc	r26, r26
    187e:	a9 f3       	breq	.-22     	; 0x186a <__divsf3_pse+0x10>
    1880:	33 d0       	rcall	.+102    	; 0x18e8 <__divsf3_pse+0x8e>
    1882:	0e 2e       	mov	r0, r30
    1884:	3a f0       	brmi	.+14     	; 0x1894 <__divsf3_pse+0x3a>
    1886:	e0 e8       	ldi	r30, 0x80	; 128
    1888:	30 d0       	rcall	.+96     	; 0x18ea <__divsf3_pse+0x90>
    188a:	91 50       	subi	r25, 0x01	; 1
    188c:	50 40       	sbci	r21, 0x00	; 0
    188e:	e6 95       	lsr	r30
    1890:	00 1c       	adc	r0, r0
    1892:	ca f7       	brpl	.-14     	; 0x1886 <__divsf3_pse+0x2c>
    1894:	29 d0       	rcall	.+82     	; 0x18e8 <__divsf3_pse+0x8e>
    1896:	fe 2f       	mov	r31, r30
    1898:	27 d0       	rcall	.+78     	; 0x18e8 <__divsf3_pse+0x8e>
    189a:	66 0f       	add	r22, r22
    189c:	77 1f       	adc	r23, r23
    189e:	88 1f       	adc	r24, r24
    18a0:	bb 1f       	adc	r27, r27
    18a2:	26 17       	cp	r18, r22
    18a4:	37 07       	cpc	r19, r23
    18a6:	48 07       	cpc	r20, r24
    18a8:	ab 07       	cpc	r26, r27
    18aa:	b0 e8       	ldi	r27, 0x80	; 128
    18ac:	09 f0       	breq	.+2      	; 0x18b0 <__divsf3_pse+0x56>
    18ae:	bb 0b       	sbc	r27, r27
    18b0:	80 2d       	mov	r24, r0
    18b2:	bf 01       	movw	r22, r30
    18b4:	ff 27       	eor	r31, r31
    18b6:	93 58       	subi	r25, 0x83	; 131
    18b8:	5f 4f       	sbci	r21, 0xFF	; 255
    18ba:	2a f0       	brmi	.+10     	; 0x18c6 <__divsf3_pse+0x6c>
    18bc:	9e 3f       	cpi	r25, 0xFE	; 254
    18be:	51 05       	cpc	r21, r1
    18c0:	68 f0       	brcs	.+26     	; 0x18dc <__divsf3_pse+0x82>
    18c2:	92 c0       	rjmp	.+292    	; 0x19e8 <__fp_inf>
    18c4:	dc c0       	rjmp	.+440    	; 0x1a7e <__fp_szero>
    18c6:	5f 3f       	cpi	r21, 0xFF	; 255
    18c8:	ec f3       	brlt	.-6      	; 0x18c4 <__divsf3_pse+0x6a>
    18ca:	98 3e       	cpi	r25, 0xE8	; 232
    18cc:	dc f3       	brlt	.-10     	; 0x18c4 <__divsf3_pse+0x6a>
    18ce:	86 95       	lsr	r24
    18d0:	77 95       	ror	r23
    18d2:	67 95       	ror	r22
    18d4:	b7 95       	ror	r27
    18d6:	f7 95       	ror	r31
    18d8:	9f 5f       	subi	r25, 0xFF	; 255
    18da:	c9 f7       	brne	.-14     	; 0x18ce <__divsf3_pse+0x74>
    18dc:	88 0f       	add	r24, r24
    18de:	91 1d       	adc	r25, r1
    18e0:	96 95       	lsr	r25
    18e2:	87 95       	ror	r24
    18e4:	97 f9       	bld	r25, 7
    18e6:	08 95       	ret
    18e8:	e1 e0       	ldi	r30, 0x01	; 1
    18ea:	66 0f       	add	r22, r22
    18ec:	77 1f       	adc	r23, r23
    18ee:	88 1f       	adc	r24, r24
    18f0:	bb 1f       	adc	r27, r27
    18f2:	62 17       	cp	r22, r18
    18f4:	73 07       	cpc	r23, r19
    18f6:	84 07       	cpc	r24, r20
    18f8:	ba 07       	cpc	r27, r26
    18fa:	20 f0       	brcs	.+8      	; 0x1904 <__divsf3_pse+0xaa>
    18fc:	62 1b       	sub	r22, r18
    18fe:	73 0b       	sbc	r23, r19
    1900:	84 0b       	sbc	r24, r20
    1902:	ba 0b       	sbc	r27, r26
    1904:	ee 1f       	adc	r30, r30
    1906:	88 f7       	brcc	.-30     	; 0x18ea <__divsf3_pse+0x90>
    1908:	e0 95       	com	r30
    190a:	08 95       	ret

0000190c <__fixsfsi>:
    190c:	04 d0       	rcall	.+8      	; 0x1916 <__fixunssfsi>
    190e:	68 94       	set
    1910:	b1 11       	cpse	r27, r1
    1912:	b5 c0       	rjmp	.+362    	; 0x1a7e <__fp_szero>
    1914:	08 95       	ret

00001916 <__fixunssfsi>:
    1916:	98 d0       	rcall	.+304    	; 0x1a48 <__fp_splitA>
    1918:	88 f0       	brcs	.+34     	; 0x193c <__fixunssfsi+0x26>
    191a:	9f 57       	subi	r25, 0x7F	; 127
    191c:	90 f0       	brcs	.+36     	; 0x1942 <__fixunssfsi+0x2c>
    191e:	b9 2f       	mov	r27, r25
    1920:	99 27       	eor	r25, r25
    1922:	b7 51       	subi	r27, 0x17	; 23
    1924:	a0 f0       	brcs	.+40     	; 0x194e <__fixunssfsi+0x38>
    1926:	d1 f0       	breq	.+52     	; 0x195c <__fixunssfsi+0x46>
    1928:	66 0f       	add	r22, r22
    192a:	77 1f       	adc	r23, r23
    192c:	88 1f       	adc	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	1a f0       	brmi	.+6      	; 0x1938 <__fixunssfsi+0x22>
    1932:	ba 95       	dec	r27
    1934:	c9 f7       	brne	.-14     	; 0x1928 <__fixunssfsi+0x12>
    1936:	12 c0       	rjmp	.+36     	; 0x195c <__fixunssfsi+0x46>
    1938:	b1 30       	cpi	r27, 0x01	; 1
    193a:	81 f0       	breq	.+32     	; 0x195c <__fixunssfsi+0x46>
    193c:	9f d0       	rcall	.+318    	; 0x1a7c <__fp_zero>
    193e:	b1 e0       	ldi	r27, 0x01	; 1
    1940:	08 95       	ret
    1942:	9c c0       	rjmp	.+312    	; 0x1a7c <__fp_zero>
    1944:	67 2f       	mov	r22, r23
    1946:	78 2f       	mov	r23, r24
    1948:	88 27       	eor	r24, r24
    194a:	b8 5f       	subi	r27, 0xF8	; 248
    194c:	39 f0       	breq	.+14     	; 0x195c <__fixunssfsi+0x46>
    194e:	b9 3f       	cpi	r27, 0xF9	; 249
    1950:	cc f3       	brlt	.-14     	; 0x1944 <__fixunssfsi+0x2e>
    1952:	86 95       	lsr	r24
    1954:	77 95       	ror	r23
    1956:	67 95       	ror	r22
    1958:	b3 95       	inc	r27
    195a:	d9 f7       	brne	.-10     	; 0x1952 <__fixunssfsi+0x3c>
    195c:	3e f4       	brtc	.+14     	; 0x196c <__fixunssfsi+0x56>
    195e:	90 95       	com	r25
    1960:	80 95       	com	r24
    1962:	70 95       	com	r23
    1964:	61 95       	neg	r22
    1966:	7f 4f       	sbci	r23, 0xFF	; 255
    1968:	8f 4f       	sbci	r24, 0xFF	; 255
    196a:	9f 4f       	sbci	r25, 0xFF	; 255
    196c:	08 95       	ret

0000196e <__floatunsisf>:
    196e:	e8 94       	clt
    1970:	09 c0       	rjmp	.+18     	; 0x1984 <__floatsisf+0x12>

00001972 <__floatsisf>:
    1972:	97 fb       	bst	r25, 7
    1974:	3e f4       	brtc	.+14     	; 0x1984 <__floatsisf+0x12>
    1976:	90 95       	com	r25
    1978:	80 95       	com	r24
    197a:	70 95       	com	r23
    197c:	61 95       	neg	r22
    197e:	7f 4f       	sbci	r23, 0xFF	; 255
    1980:	8f 4f       	sbci	r24, 0xFF	; 255
    1982:	9f 4f       	sbci	r25, 0xFF	; 255
    1984:	99 23       	and	r25, r25
    1986:	a9 f0       	breq	.+42     	; 0x19b2 <__floatsisf+0x40>
    1988:	f9 2f       	mov	r31, r25
    198a:	96 e9       	ldi	r25, 0x96	; 150
    198c:	bb 27       	eor	r27, r27
    198e:	93 95       	inc	r25
    1990:	f6 95       	lsr	r31
    1992:	87 95       	ror	r24
    1994:	77 95       	ror	r23
    1996:	67 95       	ror	r22
    1998:	b7 95       	ror	r27
    199a:	f1 11       	cpse	r31, r1
    199c:	f8 cf       	rjmp	.-16     	; 0x198e <__floatsisf+0x1c>
    199e:	fa f4       	brpl	.+62     	; 0x19de <__floatsisf+0x6c>
    19a0:	bb 0f       	add	r27, r27
    19a2:	11 f4       	brne	.+4      	; 0x19a8 <__floatsisf+0x36>
    19a4:	60 ff       	sbrs	r22, 0
    19a6:	1b c0       	rjmp	.+54     	; 0x19de <__floatsisf+0x6c>
    19a8:	6f 5f       	subi	r22, 0xFF	; 255
    19aa:	7f 4f       	sbci	r23, 0xFF	; 255
    19ac:	8f 4f       	sbci	r24, 0xFF	; 255
    19ae:	9f 4f       	sbci	r25, 0xFF	; 255
    19b0:	16 c0       	rjmp	.+44     	; 0x19de <__floatsisf+0x6c>
    19b2:	88 23       	and	r24, r24
    19b4:	11 f0       	breq	.+4      	; 0x19ba <__floatsisf+0x48>
    19b6:	96 e9       	ldi	r25, 0x96	; 150
    19b8:	11 c0       	rjmp	.+34     	; 0x19dc <__floatsisf+0x6a>
    19ba:	77 23       	and	r23, r23
    19bc:	21 f0       	breq	.+8      	; 0x19c6 <__floatsisf+0x54>
    19be:	9e e8       	ldi	r25, 0x8E	; 142
    19c0:	87 2f       	mov	r24, r23
    19c2:	76 2f       	mov	r23, r22
    19c4:	05 c0       	rjmp	.+10     	; 0x19d0 <__floatsisf+0x5e>
    19c6:	66 23       	and	r22, r22
    19c8:	71 f0       	breq	.+28     	; 0x19e6 <__floatsisf+0x74>
    19ca:	96 e8       	ldi	r25, 0x86	; 134
    19cc:	86 2f       	mov	r24, r22
    19ce:	70 e0       	ldi	r23, 0x00	; 0
    19d0:	60 e0       	ldi	r22, 0x00	; 0
    19d2:	2a f0       	brmi	.+10     	; 0x19de <__floatsisf+0x6c>
    19d4:	9a 95       	dec	r25
    19d6:	66 0f       	add	r22, r22
    19d8:	77 1f       	adc	r23, r23
    19da:	88 1f       	adc	r24, r24
    19dc:	da f7       	brpl	.-10     	; 0x19d4 <__floatsisf+0x62>
    19de:	88 0f       	add	r24, r24
    19e0:	96 95       	lsr	r25
    19e2:	87 95       	ror	r24
    19e4:	97 f9       	bld	r25, 7
    19e6:	08 95       	ret

000019e8 <__fp_inf>:
    19e8:	97 f9       	bld	r25, 7
    19ea:	9f 67       	ori	r25, 0x7F	; 127
    19ec:	80 e8       	ldi	r24, 0x80	; 128
    19ee:	70 e0       	ldi	r23, 0x00	; 0
    19f0:	60 e0       	ldi	r22, 0x00	; 0
    19f2:	08 95       	ret

000019f4 <__fp_nan>:
    19f4:	9f ef       	ldi	r25, 0xFF	; 255
    19f6:	80 ec       	ldi	r24, 0xC0	; 192
    19f8:	08 95       	ret

000019fa <__fp_pscA>:
    19fa:	00 24       	eor	r0, r0
    19fc:	0a 94       	dec	r0
    19fe:	16 16       	cp	r1, r22
    1a00:	17 06       	cpc	r1, r23
    1a02:	18 06       	cpc	r1, r24
    1a04:	09 06       	cpc	r0, r25
    1a06:	08 95       	ret

00001a08 <__fp_pscB>:
    1a08:	00 24       	eor	r0, r0
    1a0a:	0a 94       	dec	r0
    1a0c:	12 16       	cp	r1, r18
    1a0e:	13 06       	cpc	r1, r19
    1a10:	14 06       	cpc	r1, r20
    1a12:	05 06       	cpc	r0, r21
    1a14:	08 95       	ret

00001a16 <__fp_round>:
    1a16:	09 2e       	mov	r0, r25
    1a18:	03 94       	inc	r0
    1a1a:	00 0c       	add	r0, r0
    1a1c:	11 f4       	brne	.+4      	; 0x1a22 <__fp_round+0xc>
    1a1e:	88 23       	and	r24, r24
    1a20:	52 f0       	brmi	.+20     	; 0x1a36 <__fp_round+0x20>
    1a22:	bb 0f       	add	r27, r27
    1a24:	40 f4       	brcc	.+16     	; 0x1a36 <__fp_round+0x20>
    1a26:	bf 2b       	or	r27, r31
    1a28:	11 f4       	brne	.+4      	; 0x1a2e <__fp_round+0x18>
    1a2a:	60 ff       	sbrs	r22, 0
    1a2c:	04 c0       	rjmp	.+8      	; 0x1a36 <__fp_round+0x20>
    1a2e:	6f 5f       	subi	r22, 0xFF	; 255
    1a30:	7f 4f       	sbci	r23, 0xFF	; 255
    1a32:	8f 4f       	sbci	r24, 0xFF	; 255
    1a34:	9f 4f       	sbci	r25, 0xFF	; 255
    1a36:	08 95       	ret

00001a38 <__fp_split3>:
    1a38:	57 fd       	sbrc	r21, 7
    1a3a:	90 58       	subi	r25, 0x80	; 128
    1a3c:	44 0f       	add	r20, r20
    1a3e:	55 1f       	adc	r21, r21
    1a40:	59 f0       	breq	.+22     	; 0x1a58 <__fp_splitA+0x10>
    1a42:	5f 3f       	cpi	r21, 0xFF	; 255
    1a44:	71 f0       	breq	.+28     	; 0x1a62 <__fp_splitA+0x1a>
    1a46:	47 95       	ror	r20

00001a48 <__fp_splitA>:
    1a48:	88 0f       	add	r24, r24
    1a4a:	97 fb       	bst	r25, 7
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	61 f0       	breq	.+24     	; 0x1a68 <__fp_splitA+0x20>
    1a50:	9f 3f       	cpi	r25, 0xFF	; 255
    1a52:	79 f0       	breq	.+30     	; 0x1a72 <__fp_splitA+0x2a>
    1a54:	87 95       	ror	r24
    1a56:	08 95       	ret
    1a58:	12 16       	cp	r1, r18
    1a5a:	13 06       	cpc	r1, r19
    1a5c:	14 06       	cpc	r1, r20
    1a5e:	55 1f       	adc	r21, r21
    1a60:	f2 cf       	rjmp	.-28     	; 0x1a46 <__fp_split3+0xe>
    1a62:	46 95       	lsr	r20
    1a64:	f1 df       	rcall	.-30     	; 0x1a48 <__fp_splitA>
    1a66:	08 c0       	rjmp	.+16     	; 0x1a78 <__fp_splitA+0x30>
    1a68:	16 16       	cp	r1, r22
    1a6a:	17 06       	cpc	r1, r23
    1a6c:	18 06       	cpc	r1, r24
    1a6e:	99 1f       	adc	r25, r25
    1a70:	f1 cf       	rjmp	.-30     	; 0x1a54 <__fp_splitA+0xc>
    1a72:	86 95       	lsr	r24
    1a74:	71 05       	cpc	r23, r1
    1a76:	61 05       	cpc	r22, r1
    1a78:	08 94       	sec
    1a7a:	08 95       	ret

00001a7c <__fp_zero>:
    1a7c:	e8 94       	clt

00001a7e <__fp_szero>:
    1a7e:	bb 27       	eor	r27, r27
    1a80:	66 27       	eor	r22, r22
    1a82:	77 27       	eor	r23, r23
    1a84:	cb 01       	movw	r24, r22
    1a86:	97 f9       	bld	r25, 7
    1a88:	08 95       	ret

00001a8a <__mulsf3>:
    1a8a:	0b d0       	rcall	.+22     	; 0x1aa2 <__mulsf3x>
    1a8c:	c4 cf       	rjmp	.-120    	; 0x1a16 <__fp_round>
    1a8e:	b5 df       	rcall	.-150    	; 0x19fa <__fp_pscA>
    1a90:	28 f0       	brcs	.+10     	; 0x1a9c <__mulsf3+0x12>
    1a92:	ba df       	rcall	.-140    	; 0x1a08 <__fp_pscB>
    1a94:	18 f0       	brcs	.+6      	; 0x1a9c <__mulsf3+0x12>
    1a96:	95 23       	and	r25, r21
    1a98:	09 f0       	breq	.+2      	; 0x1a9c <__mulsf3+0x12>
    1a9a:	a6 cf       	rjmp	.-180    	; 0x19e8 <__fp_inf>
    1a9c:	ab cf       	rjmp	.-170    	; 0x19f4 <__fp_nan>
    1a9e:	11 24       	eor	r1, r1
    1aa0:	ee cf       	rjmp	.-36     	; 0x1a7e <__fp_szero>

00001aa2 <__mulsf3x>:
    1aa2:	ca df       	rcall	.-108    	; 0x1a38 <__fp_split3>
    1aa4:	a0 f3       	brcs	.-24     	; 0x1a8e <__mulsf3+0x4>

00001aa6 <__mulsf3_pse>:
    1aa6:	95 9f       	mul	r25, r21
    1aa8:	d1 f3       	breq	.-12     	; 0x1a9e <__mulsf3+0x14>
    1aaa:	95 0f       	add	r25, r21
    1aac:	50 e0       	ldi	r21, 0x00	; 0
    1aae:	55 1f       	adc	r21, r21
    1ab0:	62 9f       	mul	r22, r18
    1ab2:	f0 01       	movw	r30, r0
    1ab4:	72 9f       	mul	r23, r18
    1ab6:	bb 27       	eor	r27, r27
    1ab8:	f0 0d       	add	r31, r0
    1aba:	b1 1d       	adc	r27, r1
    1abc:	63 9f       	mul	r22, r19
    1abe:	aa 27       	eor	r26, r26
    1ac0:	f0 0d       	add	r31, r0
    1ac2:	b1 1d       	adc	r27, r1
    1ac4:	aa 1f       	adc	r26, r26
    1ac6:	64 9f       	mul	r22, r20
    1ac8:	66 27       	eor	r22, r22
    1aca:	b0 0d       	add	r27, r0
    1acc:	a1 1d       	adc	r26, r1
    1ace:	66 1f       	adc	r22, r22
    1ad0:	82 9f       	mul	r24, r18
    1ad2:	22 27       	eor	r18, r18
    1ad4:	b0 0d       	add	r27, r0
    1ad6:	a1 1d       	adc	r26, r1
    1ad8:	62 1f       	adc	r22, r18
    1ada:	73 9f       	mul	r23, r19
    1adc:	b0 0d       	add	r27, r0
    1ade:	a1 1d       	adc	r26, r1
    1ae0:	62 1f       	adc	r22, r18
    1ae2:	83 9f       	mul	r24, r19
    1ae4:	a0 0d       	add	r26, r0
    1ae6:	61 1d       	adc	r22, r1
    1ae8:	22 1f       	adc	r18, r18
    1aea:	74 9f       	mul	r23, r20
    1aec:	33 27       	eor	r19, r19
    1aee:	a0 0d       	add	r26, r0
    1af0:	61 1d       	adc	r22, r1
    1af2:	23 1f       	adc	r18, r19
    1af4:	84 9f       	mul	r24, r20
    1af6:	60 0d       	add	r22, r0
    1af8:	21 1d       	adc	r18, r1
    1afa:	82 2f       	mov	r24, r18
    1afc:	76 2f       	mov	r23, r22
    1afe:	6a 2f       	mov	r22, r26
    1b00:	11 24       	eor	r1, r1
    1b02:	9f 57       	subi	r25, 0x7F	; 127
    1b04:	50 40       	sbci	r21, 0x00	; 0
    1b06:	8a f0       	brmi	.+34     	; 0x1b2a <__mulsf3_pse+0x84>
    1b08:	e1 f0       	breq	.+56     	; 0x1b42 <__mulsf3_pse+0x9c>
    1b0a:	88 23       	and	r24, r24
    1b0c:	4a f0       	brmi	.+18     	; 0x1b20 <__mulsf3_pse+0x7a>
    1b0e:	ee 0f       	add	r30, r30
    1b10:	ff 1f       	adc	r31, r31
    1b12:	bb 1f       	adc	r27, r27
    1b14:	66 1f       	adc	r22, r22
    1b16:	77 1f       	adc	r23, r23
    1b18:	88 1f       	adc	r24, r24
    1b1a:	91 50       	subi	r25, 0x01	; 1
    1b1c:	50 40       	sbci	r21, 0x00	; 0
    1b1e:	a9 f7       	brne	.-22     	; 0x1b0a <__mulsf3_pse+0x64>
    1b20:	9e 3f       	cpi	r25, 0xFE	; 254
    1b22:	51 05       	cpc	r21, r1
    1b24:	70 f0       	brcs	.+28     	; 0x1b42 <__mulsf3_pse+0x9c>
    1b26:	60 cf       	rjmp	.-320    	; 0x19e8 <__fp_inf>
    1b28:	aa cf       	rjmp	.-172    	; 0x1a7e <__fp_szero>
    1b2a:	5f 3f       	cpi	r21, 0xFF	; 255
    1b2c:	ec f3       	brlt	.-6      	; 0x1b28 <__mulsf3_pse+0x82>
    1b2e:	98 3e       	cpi	r25, 0xE8	; 232
    1b30:	dc f3       	brlt	.-10     	; 0x1b28 <__mulsf3_pse+0x82>
    1b32:	86 95       	lsr	r24
    1b34:	77 95       	ror	r23
    1b36:	67 95       	ror	r22
    1b38:	b7 95       	ror	r27
    1b3a:	f7 95       	ror	r31
    1b3c:	e7 95       	ror	r30
    1b3e:	9f 5f       	subi	r25, 0xFF	; 255
    1b40:	c1 f7       	brne	.-16     	; 0x1b32 <__mulsf3_pse+0x8c>
    1b42:	fe 2b       	or	r31, r30
    1b44:	88 0f       	add	r24, r24
    1b46:	91 1d       	adc	r25, r1
    1b48:	96 95       	lsr	r25
    1b4a:	87 95       	ror	r24
    1b4c:	97 f9       	bld	r25, 7
    1b4e:	08 95       	ret

00001b50 <pow>:
    1b50:	fa 01       	movw	r30, r20
    1b52:	ee 0f       	add	r30, r30
    1b54:	ff 1f       	adc	r31, r31
    1b56:	30 96       	adiw	r30, 0x00	; 0
    1b58:	21 05       	cpc	r18, r1
    1b5a:	31 05       	cpc	r19, r1
    1b5c:	99 f1       	breq	.+102    	; 0x1bc4 <pow+0x74>
    1b5e:	61 15       	cp	r22, r1
    1b60:	71 05       	cpc	r23, r1
    1b62:	61 f4       	brne	.+24     	; 0x1b7c <pow+0x2c>
    1b64:	80 38       	cpi	r24, 0x80	; 128
    1b66:	bf e3       	ldi	r27, 0x3F	; 63
    1b68:	9b 07       	cpc	r25, r27
    1b6a:	49 f1       	breq	.+82     	; 0x1bbe <pow+0x6e>
    1b6c:	68 94       	set
    1b6e:	90 38       	cpi	r25, 0x80	; 128
    1b70:	81 05       	cpc	r24, r1
    1b72:	61 f0       	breq	.+24     	; 0x1b8c <pow+0x3c>
    1b74:	80 38       	cpi	r24, 0x80	; 128
    1b76:	bf ef       	ldi	r27, 0xFF	; 255
    1b78:	9b 07       	cpc	r25, r27
    1b7a:	41 f0       	breq	.+16     	; 0x1b8c <pow+0x3c>
    1b7c:	99 23       	and	r25, r25
    1b7e:	42 f5       	brpl	.+80     	; 0x1bd0 <pow+0x80>
    1b80:	ff 3f       	cpi	r31, 0xFF	; 255
    1b82:	e1 05       	cpc	r30, r1
    1b84:	31 05       	cpc	r19, r1
    1b86:	21 05       	cpc	r18, r1
    1b88:	11 f1       	breq	.+68     	; 0x1bce <pow+0x7e>
    1b8a:	e8 94       	clt
    1b8c:	08 94       	sec
    1b8e:	e7 95       	ror	r30
    1b90:	d9 01       	movw	r26, r18
    1b92:	aa 23       	and	r26, r26
    1b94:	29 f4       	brne	.+10     	; 0x1ba0 <pow+0x50>
    1b96:	ab 2f       	mov	r26, r27
    1b98:	be 2f       	mov	r27, r30
    1b9a:	f8 5f       	subi	r31, 0xF8	; 248
    1b9c:	d0 f3       	brcs	.-12     	; 0x1b92 <pow+0x42>
    1b9e:	10 c0       	rjmp	.+32     	; 0x1bc0 <pow+0x70>
    1ba0:	ff 5f       	subi	r31, 0xFF	; 255
    1ba2:	70 f4       	brcc	.+28     	; 0x1bc0 <pow+0x70>
    1ba4:	a6 95       	lsr	r26
    1ba6:	e0 f7       	brcc	.-8      	; 0x1ba0 <pow+0x50>
    1ba8:	f7 39       	cpi	r31, 0x97	; 151
    1baa:	50 f0       	brcs	.+20     	; 0x1bc0 <pow+0x70>
    1bac:	19 f0       	breq	.+6      	; 0x1bb4 <pow+0x64>
    1bae:	ff 3a       	cpi	r31, 0xAF	; 175
    1bb0:	38 f4       	brcc	.+14     	; 0x1bc0 <pow+0x70>
    1bb2:	9f 77       	andi	r25, 0x7F	; 127
    1bb4:	9f 93       	push	r25
    1bb6:	0c d0       	rcall	.+24     	; 0x1bd0 <pow+0x80>
    1bb8:	0f 90       	pop	r0
    1bba:	07 fc       	sbrc	r0, 7
    1bbc:	90 58       	subi	r25, 0x80	; 128
    1bbe:	08 95       	ret
    1bc0:	3e f0       	brts	.+14     	; 0x1bd0 <pow+0x80>
    1bc2:	18 cf       	rjmp	.-464    	; 0x19f4 <__fp_nan>
    1bc4:	60 e0       	ldi	r22, 0x00	; 0
    1bc6:	70 e0       	ldi	r23, 0x00	; 0
    1bc8:	80 e8       	ldi	r24, 0x80	; 128
    1bca:	9f e3       	ldi	r25, 0x3F	; 63
    1bcc:	08 95       	ret
    1bce:	4f e7       	ldi	r20, 0x7F	; 127
    1bd0:	9f 77       	andi	r25, 0x7F	; 127
    1bd2:	5f 93       	push	r21
    1bd4:	4f 93       	push	r20
    1bd6:	3f 93       	push	r19
    1bd8:	2f 93       	push	r18
    1bda:	9e d0       	rcall	.+316    	; 0x1d18 <log>
    1bdc:	2f 91       	pop	r18
    1bde:	3f 91       	pop	r19
    1be0:	4f 91       	pop	r20
    1be2:	5f 91       	pop	r21
    1be4:	52 df       	rcall	.-348    	; 0x1a8a <__mulsf3>
    1be6:	05 c0       	rjmp	.+10     	; 0x1bf2 <exp>
    1be8:	19 f4       	brne	.+6      	; 0x1bf0 <pow+0xa0>
    1bea:	0e f0       	brts	.+2      	; 0x1bee <pow+0x9e>
    1bec:	fd ce       	rjmp	.-518    	; 0x19e8 <__fp_inf>
    1bee:	46 cf       	rjmp	.-372    	; 0x1a7c <__fp_zero>
    1bf0:	01 cf       	rjmp	.-510    	; 0x19f4 <__fp_nan>

00001bf2 <exp>:
    1bf2:	2a df       	rcall	.-428    	; 0x1a48 <__fp_splitA>
    1bf4:	c8 f3       	brcs	.-14     	; 0x1be8 <pow+0x98>
    1bf6:	96 38       	cpi	r25, 0x86	; 134
    1bf8:	c0 f7       	brcc	.-16     	; 0x1bea <pow+0x9a>
    1bfa:	07 f8       	bld	r0, 7
    1bfc:	0f 92       	push	r0
    1bfe:	e8 94       	clt
    1c00:	2b e3       	ldi	r18, 0x3B	; 59
    1c02:	3a ea       	ldi	r19, 0xAA	; 170
    1c04:	48 eb       	ldi	r20, 0xB8	; 184
    1c06:	5f e7       	ldi	r21, 0x7F	; 127
    1c08:	4e df       	rcall	.-356    	; 0x1aa6 <__mulsf3_pse>
    1c0a:	0f 92       	push	r0
    1c0c:	0f 92       	push	r0
    1c0e:	0f 92       	push	r0
    1c10:	4d b7       	in	r20, 0x3d	; 61
    1c12:	5e b7       	in	r21, 0x3e	; 62
    1c14:	0f 92       	push	r0
    1c16:	c0 d0       	rcall	.+384    	; 0x1d98 <modf>
    1c18:	e4 ee       	ldi	r30, 0xE4	; 228
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	16 d0       	rcall	.+44     	; 0x1c4a <__fp_powser>
    1c1e:	4f 91       	pop	r20
    1c20:	5f 91       	pop	r21
    1c22:	ef 91       	pop	r30
    1c24:	ff 91       	pop	r31
    1c26:	e5 95       	asr	r30
    1c28:	ee 1f       	adc	r30, r30
    1c2a:	ff 1f       	adc	r31, r31
    1c2c:	49 f0       	breq	.+18     	; 0x1c40 <exp+0x4e>
    1c2e:	fe 57       	subi	r31, 0x7E	; 126
    1c30:	e0 68       	ori	r30, 0x80	; 128
    1c32:	44 27       	eor	r20, r20
    1c34:	ee 0f       	add	r30, r30
    1c36:	44 1f       	adc	r20, r20
    1c38:	fa 95       	dec	r31
    1c3a:	e1 f7       	brne	.-8      	; 0x1c34 <exp+0x42>
    1c3c:	41 95       	neg	r20
    1c3e:	55 0b       	sbc	r21, r21
    1c40:	32 d0       	rcall	.+100    	; 0x1ca6 <ldexp>
    1c42:	0f 90       	pop	r0
    1c44:	07 fe       	sbrs	r0, 7
    1c46:	26 c0       	rjmp	.+76     	; 0x1c94 <inverse>
    1c48:	08 95       	ret

00001c4a <__fp_powser>:
    1c4a:	df 93       	push	r29
    1c4c:	cf 93       	push	r28
    1c4e:	1f 93       	push	r17
    1c50:	0f 93       	push	r16
    1c52:	ff 92       	push	r15
    1c54:	ef 92       	push	r14
    1c56:	df 92       	push	r13
    1c58:	7b 01       	movw	r14, r22
    1c5a:	8c 01       	movw	r16, r24
    1c5c:	68 94       	set
    1c5e:	05 c0       	rjmp	.+10     	; 0x1c6a <__fp_powser+0x20>
    1c60:	da 2e       	mov	r13, r26
    1c62:	ef 01       	movw	r28, r30
    1c64:	1e df       	rcall	.-452    	; 0x1aa2 <__mulsf3x>
    1c66:	fe 01       	movw	r30, r28
    1c68:	e8 94       	clt
    1c6a:	a5 91       	lpm	r26, Z+
    1c6c:	25 91       	lpm	r18, Z+
    1c6e:	35 91       	lpm	r19, Z+
    1c70:	45 91       	lpm	r20, Z+
    1c72:	55 91       	lpm	r21, Z+
    1c74:	ae f3       	brts	.-22     	; 0x1c60 <__fp_powser+0x16>
    1c76:	ef 01       	movw	r28, r30
    1c78:	8e dd       	rcall	.-1252   	; 0x1796 <__addsf3x>
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	97 01       	movw	r18, r14
    1c7e:	a8 01       	movw	r20, r16
    1c80:	da 94       	dec	r13
    1c82:	79 f7       	brne	.-34     	; 0x1c62 <__fp_powser+0x18>
    1c84:	df 90       	pop	r13
    1c86:	ef 90       	pop	r14
    1c88:	ff 90       	pop	r15
    1c8a:	0f 91       	pop	r16
    1c8c:	1f 91       	pop	r17
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <inverse>:
    1c94:	9b 01       	movw	r18, r22
    1c96:	ac 01       	movw	r20, r24
    1c98:	60 e0       	ldi	r22, 0x00	; 0
    1c9a:	70 e0       	ldi	r23, 0x00	; 0
    1c9c:	80 e8       	ldi	r24, 0x80	; 128
    1c9e:	9f e3       	ldi	r25, 0x3F	; 63
    1ca0:	cd cd       	rjmp	.-1126   	; 0x183c <__divsf3>
    1ca2:	a2 ce       	rjmp	.-700    	; 0x19e8 <__fp_inf>
    1ca4:	ac c0       	rjmp	.+344    	; 0x1dfe <__fp_mpack>

00001ca6 <ldexp>:
    1ca6:	d0 de       	rcall	.-608    	; 0x1a48 <__fp_splitA>
    1ca8:	e8 f3       	brcs	.-6      	; 0x1ca4 <inverse+0x10>
    1caa:	99 23       	and	r25, r25
    1cac:	d9 f3       	breq	.-10     	; 0x1ca4 <inverse+0x10>
    1cae:	94 0f       	add	r25, r20
    1cb0:	51 1d       	adc	r21, r1
    1cb2:	bb f3       	brvs	.-18     	; 0x1ca2 <inverse+0xe>
    1cb4:	91 50       	subi	r25, 0x01	; 1
    1cb6:	50 40       	sbci	r21, 0x00	; 0
    1cb8:	94 f0       	brlt	.+36     	; 0x1cde <ldexp+0x38>
    1cba:	59 f0       	breq	.+22     	; 0x1cd2 <ldexp+0x2c>
    1cbc:	88 23       	and	r24, r24
    1cbe:	32 f0       	brmi	.+12     	; 0x1ccc <ldexp+0x26>
    1cc0:	66 0f       	add	r22, r22
    1cc2:	77 1f       	adc	r23, r23
    1cc4:	88 1f       	adc	r24, r24
    1cc6:	91 50       	subi	r25, 0x01	; 1
    1cc8:	50 40       	sbci	r21, 0x00	; 0
    1cca:	c1 f7       	brne	.-16     	; 0x1cbc <ldexp+0x16>
    1ccc:	9e 3f       	cpi	r25, 0xFE	; 254
    1cce:	51 05       	cpc	r21, r1
    1cd0:	44 f7       	brge	.-48     	; 0x1ca2 <inverse+0xe>
    1cd2:	88 0f       	add	r24, r24
    1cd4:	91 1d       	adc	r25, r1
    1cd6:	96 95       	lsr	r25
    1cd8:	87 95       	ror	r24
    1cda:	97 f9       	bld	r25, 7
    1cdc:	08 95       	ret
    1cde:	5f 3f       	cpi	r21, 0xFF	; 255
    1ce0:	ac f0       	brlt	.+42     	; 0x1d0c <ldexp+0x66>
    1ce2:	98 3e       	cpi	r25, 0xE8	; 232
    1ce4:	9c f0       	brlt	.+38     	; 0x1d0c <ldexp+0x66>
    1ce6:	bb 27       	eor	r27, r27
    1ce8:	86 95       	lsr	r24
    1cea:	77 95       	ror	r23
    1cec:	67 95       	ror	r22
    1cee:	b7 95       	ror	r27
    1cf0:	08 f4       	brcc	.+2      	; 0x1cf4 <ldexp+0x4e>
    1cf2:	b1 60       	ori	r27, 0x01	; 1
    1cf4:	93 95       	inc	r25
    1cf6:	c1 f7       	brne	.-16     	; 0x1ce8 <ldexp+0x42>
    1cf8:	bb 0f       	add	r27, r27
    1cfa:	58 f7       	brcc	.-42     	; 0x1cd2 <ldexp+0x2c>
    1cfc:	11 f4       	brne	.+4      	; 0x1d02 <ldexp+0x5c>
    1cfe:	60 ff       	sbrs	r22, 0
    1d00:	e8 cf       	rjmp	.-48     	; 0x1cd2 <ldexp+0x2c>
    1d02:	6f 5f       	subi	r22, 0xFF	; 255
    1d04:	7f 4f       	sbci	r23, 0xFF	; 255
    1d06:	8f 4f       	sbci	r24, 0xFF	; 255
    1d08:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0a:	e3 cf       	rjmp	.-58     	; 0x1cd2 <ldexp+0x2c>
    1d0c:	b8 ce       	rjmp	.-656    	; 0x1a7e <__fp_szero>
    1d0e:	0e f0       	brts	.+2      	; 0x1d12 <ldexp+0x6c>
    1d10:	76 c0       	rjmp	.+236    	; 0x1dfe <__fp_mpack>
    1d12:	70 ce       	rjmp	.-800    	; 0x19f4 <__fp_nan>
    1d14:	68 94       	set
    1d16:	68 ce       	rjmp	.-816    	; 0x19e8 <__fp_inf>

00001d18 <log>:
    1d18:	97 de       	rcall	.-722    	; 0x1a48 <__fp_splitA>
    1d1a:	c8 f3       	brcs	.-14     	; 0x1d0e <ldexp+0x68>
    1d1c:	99 23       	and	r25, r25
    1d1e:	d1 f3       	breq	.-12     	; 0x1d14 <ldexp+0x6e>
    1d20:	c6 f3       	brts	.-16     	; 0x1d12 <ldexp+0x6c>
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	1f 93       	push	r17
    1d28:	0f 93       	push	r16
    1d2a:	ff 92       	push	r15
    1d2c:	c9 2f       	mov	r28, r25
    1d2e:	dd 27       	eor	r29, r29
    1d30:	88 23       	and	r24, r24
    1d32:	2a f0       	brmi	.+10     	; 0x1d3e <log+0x26>
    1d34:	21 97       	sbiw	r28, 0x01	; 1
    1d36:	66 0f       	add	r22, r22
    1d38:	77 1f       	adc	r23, r23
    1d3a:	88 1f       	adc	r24, r24
    1d3c:	da f7       	brpl	.-10     	; 0x1d34 <log+0x1c>
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	40 e8       	ldi	r20, 0x80	; 128
    1d44:	5f eb       	ldi	r21, 0xBF	; 191
    1d46:	9f e3       	ldi	r25, 0x3F	; 63
    1d48:	88 39       	cpi	r24, 0x98	; 152
    1d4a:	20 f0       	brcs	.+8      	; 0x1d54 <log+0x3c>
    1d4c:	80 3e       	cpi	r24, 0xE0	; 224
    1d4e:	30 f0       	brcs	.+12     	; 0x1d5c <log+0x44>
    1d50:	21 96       	adiw	r28, 0x01	; 1
    1d52:	8f 77       	andi	r24, 0x7F	; 127
    1d54:	0f dd       	rcall	.-1506   	; 0x1774 <__addsf3>
    1d56:	ec e0       	ldi	r30, 0x0C	; 12
    1d58:	f1 e0       	ldi	r31, 0x01	; 1
    1d5a:	03 c0       	rjmp	.+6      	; 0x1d62 <log+0x4a>
    1d5c:	0b dd       	rcall	.-1514   	; 0x1774 <__addsf3>
    1d5e:	e9 e3       	ldi	r30, 0x39	; 57
    1d60:	f1 e0       	ldi	r31, 0x01	; 1
    1d62:	73 df       	rcall	.-282    	; 0x1c4a <__fp_powser>
    1d64:	8b 01       	movw	r16, r22
    1d66:	be 01       	movw	r22, r28
    1d68:	ec 01       	movw	r28, r24
    1d6a:	fb 2e       	mov	r15, r27
    1d6c:	6f 57       	subi	r22, 0x7F	; 127
    1d6e:	71 09       	sbc	r23, r1
    1d70:	75 95       	asr	r23
    1d72:	77 1f       	adc	r23, r23
    1d74:	88 0b       	sbc	r24, r24
    1d76:	99 0b       	sbc	r25, r25
    1d78:	fc dd       	rcall	.-1032   	; 0x1972 <__floatsisf>
    1d7a:	28 e1       	ldi	r18, 0x18	; 24
    1d7c:	32 e7       	ldi	r19, 0x72	; 114
    1d7e:	41 e3       	ldi	r20, 0x31	; 49
    1d80:	5f e3       	ldi	r21, 0x3F	; 63
    1d82:	8f de       	rcall	.-738    	; 0x1aa2 <__mulsf3x>
    1d84:	af 2d       	mov	r26, r15
    1d86:	98 01       	movw	r18, r16
    1d88:	ae 01       	movw	r20, r28
    1d8a:	ff 90       	pop	r15
    1d8c:	0f 91       	pop	r16
    1d8e:	1f 91       	pop	r17
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	00 dd       	rcall	.-1536   	; 0x1796 <__addsf3x>
    1d96:	3f ce       	rjmp	.-898    	; 0x1a16 <__fp_round>

00001d98 <modf>:
    1d98:	fa 01       	movw	r30, r20
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	aa 0f       	add	r26, r26
    1d9e:	bb 1f       	adc	r27, r27
    1da0:	9b 01       	movw	r18, r22
    1da2:	ac 01       	movw	r20, r24
    1da4:	bf 57       	subi	r27, 0x7F	; 127
    1da6:	28 f4       	brcc	.+10     	; 0x1db2 <modf+0x1a>
    1da8:	22 27       	eor	r18, r18
    1daa:	33 27       	eor	r19, r19
    1dac:	44 27       	eor	r20, r20
    1dae:	50 78       	andi	r21, 0x80	; 128
    1db0:	1f c0       	rjmp	.+62     	; 0x1df0 <modf+0x58>
    1db2:	b7 51       	subi	r27, 0x17	; 23
    1db4:	88 f4       	brcc	.+34     	; 0x1dd8 <modf+0x40>
    1db6:	ab 2f       	mov	r26, r27
    1db8:	00 24       	eor	r0, r0
    1dba:	46 95       	lsr	r20
    1dbc:	37 95       	ror	r19
    1dbe:	27 95       	ror	r18
    1dc0:	01 1c       	adc	r0, r1
    1dc2:	a3 95       	inc	r26
    1dc4:	d2 f3       	brmi	.-12     	; 0x1dba <modf+0x22>
    1dc6:	00 20       	and	r0, r0
    1dc8:	69 f0       	breq	.+26     	; 0x1de4 <modf+0x4c>
    1dca:	22 0f       	add	r18, r18
    1dcc:	33 1f       	adc	r19, r19
    1dce:	44 1f       	adc	r20, r20
    1dd0:	b3 95       	inc	r27
    1dd2:	da f3       	brmi	.-10     	; 0x1dca <modf+0x32>
    1dd4:	0d d0       	rcall	.+26     	; 0x1df0 <modf+0x58>
    1dd6:	cd cc       	rjmp	.-1638   	; 0x1772 <__subsf3>
    1dd8:	61 30       	cpi	r22, 0x01	; 1
    1dda:	71 05       	cpc	r23, r1
    1ddc:	a0 e8       	ldi	r26, 0x80	; 128
    1dde:	8a 07       	cpc	r24, r26
    1de0:	b9 46       	sbci	r27, 0x69	; 105
    1de2:	30 f4       	brcc	.+12     	; 0x1df0 <modf+0x58>
    1de4:	9b 01       	movw	r18, r22
    1de6:	ac 01       	movw	r20, r24
    1de8:	66 27       	eor	r22, r22
    1dea:	77 27       	eor	r23, r23
    1dec:	88 27       	eor	r24, r24
    1dee:	90 78       	andi	r25, 0x80	; 128
    1df0:	30 96       	adiw	r30, 0x00	; 0
    1df2:	21 f0       	breq	.+8      	; 0x1dfc <modf+0x64>
    1df4:	20 83       	st	Z, r18
    1df6:	31 83       	std	Z+1, r19	; 0x01
    1df8:	42 83       	std	Z+2, r20	; 0x02
    1dfa:	53 83       	std	Z+3, r21	; 0x03
    1dfc:	08 95       	ret

00001dfe <__fp_mpack>:
    1dfe:	9f 3f       	cpi	r25, 0xFF	; 255
    1e00:	31 f0       	breq	.+12     	; 0x1e0e <__fp_mpack_finite+0xc>

00001e02 <__fp_mpack_finite>:
    1e02:	91 50       	subi	r25, 0x01	; 1
    1e04:	20 f4       	brcc	.+8      	; 0x1e0e <__fp_mpack_finite+0xc>
    1e06:	87 95       	ror	r24
    1e08:	77 95       	ror	r23
    1e0a:	67 95       	ror	r22
    1e0c:	b7 95       	ror	r27
    1e0e:	88 0f       	add	r24, r24
    1e10:	91 1d       	adc	r25, r1
    1e12:	96 95       	lsr	r25
    1e14:	87 95       	ror	r24
    1e16:	97 f9       	bld	r25, 7
    1e18:	08 95       	ret

00001e1a <__umulhisi3>:
    1e1a:	a2 9f       	mul	r26, r18
    1e1c:	b0 01       	movw	r22, r0
    1e1e:	b3 9f       	mul	r27, r19
    1e20:	c0 01       	movw	r24, r0
    1e22:	a3 9f       	mul	r26, r19
    1e24:	70 0d       	add	r23, r0
    1e26:	81 1d       	adc	r24, r1
    1e28:	11 24       	eor	r1, r1
    1e2a:	91 1d       	adc	r25, r1
    1e2c:	b2 9f       	mul	r27, r18
    1e2e:	70 0d       	add	r23, r0
    1e30:	81 1d       	adc	r24, r1
    1e32:	11 24       	eor	r1, r1
    1e34:	91 1d       	adc	r25, r1
    1e36:	08 95       	ret

00001e38 <_exit>:
    1e38:	f8 94       	cli

00001e3a <__stop_program>:
    1e3a:	ff cf       	rjmp	.-2      	; 0x1e3a <__stop_program>
